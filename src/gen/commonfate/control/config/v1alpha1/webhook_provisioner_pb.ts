// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/config/v1alpha1/webhook_provisioner.proto (package commonfate.control.config.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { EID } from '../../../entity/v1alpha1/eid_pb.js'
import { Diagnostic } from '../../../access/v1alpha1/diagnostic_pb.js'

/**
 * @generated from message commonfate.control.config.v1alpha1.Capability
 */
export class Capability extends Message<Capability> {
  /**
   * @generated from field: string target_type = 1;
   */
  targetType = ''

  /**
   * @generated from field: string role_type = 2;
   */
  roleType = ''

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID belonging_to = 3;
   */
  belongingTo?: EID

  constructor(data?: PartialMessage<Capability>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.config.v1alpha1.Capability'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'target_type',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    { no: 2, name: 'role_type', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'belonging_to', kind: 'message', T: EID }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Capability {
    return new Capability().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Capability {
    return new Capability().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Capability {
    return new Capability().fromJsonString(jsonString, options)
  }

  static equals(
    a: Capability | PlainMessage<Capability> | undefined,
    b: Capability | PlainMessage<Capability> | undefined
  ): boolean {
    return proto3.util.equals(Capability, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.CreateWebhookProvisionerRequest
 */
export class CreateWebhookProvisionerRequest extends Message<CreateWebhookProvisionerRequest> {
  /**
   * @generated from field: string url = 2;
   */
  url = ''

  /**
   * @generated from field: repeated commonfate.control.config.v1alpha1.Capability capabilities = 3;
   */
  capabilities: Capability[] = []

  constructor(data?: PartialMessage<CreateWebhookProvisionerRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.CreateWebhookProvisionerRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: 'url', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'capabilities',
      kind: 'message',
      T: Capability,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateWebhookProvisionerRequest {
    return new CreateWebhookProvisionerRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateWebhookProvisionerRequest {
    return new CreateWebhookProvisionerRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateWebhookProvisionerRequest {
    return new CreateWebhookProvisionerRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CreateWebhookProvisionerRequest
      | PlainMessage<CreateWebhookProvisionerRequest>
      | undefined,
    b:
      | CreateWebhookProvisionerRequest
      | PlainMessage<CreateWebhookProvisionerRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateWebhookProvisionerRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.WebhookProvisioner
 */
export class WebhookProvisioner extends Message<WebhookProvisioner> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string url = 2;
   */
  url = ''

  /**
   * @generated from field: repeated commonfate.control.config.v1alpha1.Capability capabilities = 3;
   */
  capabilities: Capability[] = []

  constructor(data?: PartialMessage<WebhookProvisioner>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.WebhookProvisioner'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'url', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'capabilities',
      kind: 'message',
      T: Capability,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): WebhookProvisioner {
    return new WebhookProvisioner().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): WebhookProvisioner {
    return new WebhookProvisioner().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): WebhookProvisioner {
    return new WebhookProvisioner().fromJsonString(jsonString, options)
  }

  static equals(
    a: WebhookProvisioner | PlainMessage<WebhookProvisioner> | undefined,
    b: WebhookProvisioner | PlainMessage<WebhookProvisioner> | undefined
  ): boolean {
    return proto3.util.equals(WebhookProvisioner, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.CreateWebhookProvisionerResponse
 */
export class CreateWebhookProvisionerResponse extends Message<CreateWebhookProvisionerResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.WebhookProvisioner WebhookProvisioner = 1;
   */
  WebhookProvisioner?: WebhookProvisioner

  /**
   * @generated from field: repeated commonfate.access.v1alpha1.Diagnostic diagnostics = 2;
   */
  diagnostics: Diagnostic[] = []

  constructor(data?: PartialMessage<CreateWebhookProvisionerResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.CreateWebhookProvisionerResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'WebhookProvisioner',
      kind: 'message',
      T: WebhookProvisioner
    },
    {
      no: 2,
      name: 'diagnostics',
      kind: 'message',
      T: Diagnostic,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateWebhookProvisionerResponse {
    return new CreateWebhookProvisionerResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateWebhookProvisionerResponse {
    return new CreateWebhookProvisionerResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateWebhookProvisionerResponse {
    return new CreateWebhookProvisionerResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CreateWebhookProvisionerResponse
      | PlainMessage<CreateWebhookProvisionerResponse>
      | undefined,
    b:
      | CreateWebhookProvisionerResponse
      | PlainMessage<CreateWebhookProvisionerResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateWebhookProvisionerResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.GetWebhookProvisionerRequest
 */
export class GetWebhookProvisionerRequest extends Message<GetWebhookProvisionerRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<GetWebhookProvisionerRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.GetWebhookProvisionerRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetWebhookProvisionerRequest {
    return new GetWebhookProvisionerRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetWebhookProvisionerRequest {
    return new GetWebhookProvisionerRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetWebhookProvisionerRequest {
    return new GetWebhookProvisionerRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | GetWebhookProvisionerRequest
      | PlainMessage<GetWebhookProvisionerRequest>
      | undefined,
    b:
      | GetWebhookProvisionerRequest
      | PlainMessage<GetWebhookProvisionerRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(GetWebhookProvisionerRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.GetWebhookProvisionerResponse
 */
export class GetWebhookProvisionerResponse extends Message<GetWebhookProvisionerResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.WebhookProvisioner WebhookProvisioner = 1;
   */
  WebhookProvisioner?: WebhookProvisioner

  constructor(data?: PartialMessage<GetWebhookProvisionerResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.GetWebhookProvisionerResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'WebhookProvisioner',
      kind: 'message',
      T: WebhookProvisioner
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetWebhookProvisionerResponse {
    return new GetWebhookProvisionerResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetWebhookProvisionerResponse {
    return new GetWebhookProvisionerResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetWebhookProvisionerResponse {
    return new GetWebhookProvisionerResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | GetWebhookProvisionerResponse
      | PlainMessage<GetWebhookProvisionerResponse>
      | undefined,
    b:
      | GetWebhookProvisionerResponse
      | PlainMessage<GetWebhookProvisionerResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetWebhookProvisionerResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.UpdateWebhookProvisionerRequest
 */
export class UpdateWebhookProvisionerRequest extends Message<UpdateWebhookProvisionerRequest> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.WebhookProvisioner WebhookProvisioner = 1;
   */
  WebhookProvisioner?: WebhookProvisioner

  constructor(data?: PartialMessage<UpdateWebhookProvisionerRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.UpdateWebhookProvisionerRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'WebhookProvisioner',
      kind: 'message',
      T: WebhookProvisioner
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateWebhookProvisionerRequest {
    return new UpdateWebhookProvisionerRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateWebhookProvisionerRequest {
    return new UpdateWebhookProvisionerRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateWebhookProvisionerRequest {
    return new UpdateWebhookProvisionerRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | UpdateWebhookProvisionerRequest
      | PlainMessage<UpdateWebhookProvisionerRequest>
      | undefined,
    b:
      | UpdateWebhookProvisionerRequest
      | PlainMessage<UpdateWebhookProvisionerRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateWebhookProvisionerRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.UpdateWebhookProvisionerResponse
 */
export class UpdateWebhookProvisionerResponse extends Message<UpdateWebhookProvisionerResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.WebhookProvisioner WebhookProvisioner = 1;
   */
  WebhookProvisioner?: WebhookProvisioner

  /**
   * @generated from field: repeated commonfate.access.v1alpha1.Diagnostic diagnostics = 2;
   */
  diagnostics: Diagnostic[] = []

  constructor(data?: PartialMessage<UpdateWebhookProvisionerResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.UpdateWebhookProvisionerResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'WebhookProvisioner',
      kind: 'message',
      T: WebhookProvisioner
    },
    {
      no: 2,
      name: 'diagnostics',
      kind: 'message',
      T: Diagnostic,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateWebhookProvisionerResponse {
    return new UpdateWebhookProvisionerResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateWebhookProvisionerResponse {
    return new UpdateWebhookProvisionerResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateWebhookProvisionerResponse {
    return new UpdateWebhookProvisionerResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | UpdateWebhookProvisionerResponse
      | PlainMessage<UpdateWebhookProvisionerResponse>
      | undefined,
    b:
      | UpdateWebhookProvisionerResponse
      | PlainMessage<UpdateWebhookProvisionerResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateWebhookProvisionerResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.DeleteWebhookProvisionerRequest
 */
export class DeleteWebhookProvisionerRequest extends Message<DeleteWebhookProvisionerRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DeleteWebhookProvisionerRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.DeleteWebhookProvisionerRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteWebhookProvisionerRequest {
    return new DeleteWebhookProvisionerRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteWebhookProvisionerRequest {
    return new DeleteWebhookProvisionerRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteWebhookProvisionerRequest {
    return new DeleteWebhookProvisionerRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | DeleteWebhookProvisionerRequest
      | PlainMessage<DeleteWebhookProvisionerRequest>
      | undefined,
    b:
      | DeleteWebhookProvisionerRequest
      | PlainMessage<DeleteWebhookProvisionerRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteWebhookProvisionerRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.DeleteWebhookProvisionerResponse
 */
export class DeleteWebhookProvisionerResponse extends Message<DeleteWebhookProvisionerResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DeleteWebhookProvisionerResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.DeleteWebhookProvisionerResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteWebhookProvisionerResponse {
    return new DeleteWebhookProvisionerResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteWebhookProvisionerResponse {
    return new DeleteWebhookProvisionerResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteWebhookProvisionerResponse {
    return new DeleteWebhookProvisionerResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | DeleteWebhookProvisionerResponse
      | PlainMessage<DeleteWebhookProvisionerResponse>
      | undefined,
    b:
      | DeleteWebhookProvisionerResponse
      | PlainMessage<DeleteWebhookProvisionerResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteWebhookProvisionerResponse, a, b)
  }
}
