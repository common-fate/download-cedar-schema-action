// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/config/v1alpha1/access_workflow.proto (package commonfate.control.config.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Duration, Message, proto3 } from '@bufbuild/protobuf'

/**
 * @generated from message commonfate.control.config.v1alpha1.AccessWorkflow
 */
export class AccessWorkflow extends Message<AccessWorkflow> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string name = 2;
   */
  name = ''

  /**
   * @generated from field: google.protobuf.Duration access_duration = 3;
   */
  accessDuration?: Duration

  /**
   * @generated from field: google.protobuf.Duration try_extend_after = 4;
   */
  tryExtendAfter?: Duration

  /**
   * @generated from field: int32 priority = 5;
   */
  priority = 0

  constructor(data?: PartialMessage<AccessWorkflow>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.config.v1alpha1.AccessWorkflow'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'access_duration', kind: 'message', T: Duration },
    { no: 4, name: 'try_extend_after', kind: 'message', T: Duration },
    { no: 5, name: 'priority', kind: 'scalar', T: 5 /* ScalarType.INT32 */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AccessWorkflow {
    return new AccessWorkflow().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AccessWorkflow {
    return new AccessWorkflow().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AccessWorkflow {
    return new AccessWorkflow().fromJsonString(jsonString, options)
  }

  static equals(
    a: AccessWorkflow | PlainMessage<AccessWorkflow> | undefined,
    b: AccessWorkflow | PlainMessage<AccessWorkflow> | undefined
  ): boolean {
    return proto3.util.equals(AccessWorkflow, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest
 */
export class CreateAccessWorkflowRequest extends Message<CreateAccessWorkflowRequest> {
  /**
   * @generated from field: string name = 2;
   */
  name = ''

  /**
   * @generated from field: google.protobuf.Duration access_duration = 3;
   */
  accessDuration?: Duration

  /**
   * @generated from field: google.protobuf.Duration try_extend_after = 4;
   */
  tryExtendAfter?: Duration

  /**
   * @generated from field: int32 priority = 5;
   */
  priority = 0

  constructor(data?: PartialMessage<CreateAccessWorkflowRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.CreateAccessWorkflowRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'access_duration', kind: 'message', T: Duration },
    { no: 4, name: 'try_extend_after', kind: 'message', T: Duration },
    { no: 5, name: 'priority', kind: 'scalar', T: 5 /* ScalarType.INT32 */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAccessWorkflowRequest {
    return new CreateAccessWorkflowRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateAccessWorkflowRequest {
    return new CreateAccessWorkflowRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAccessWorkflowRequest {
    return new CreateAccessWorkflowRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateAccessWorkflowRequest
      | PlainMessage<CreateAccessWorkflowRequest>
      | undefined,
    b:
      | CreateAccessWorkflowRequest
      | PlainMessage<CreateAccessWorkflowRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateAccessWorkflowRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.CreateAccessWorkflowResponse
 */
export class CreateAccessWorkflowResponse extends Message<CreateAccessWorkflowResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.AccessWorkflow workflow = 1;
   */
  workflow?: AccessWorkflow

  constructor(data?: PartialMessage<CreateAccessWorkflowResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.CreateAccessWorkflowResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'workflow', kind: 'message', T: AccessWorkflow }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAccessWorkflowResponse {
    return new CreateAccessWorkflowResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateAccessWorkflowResponse {
    return new CreateAccessWorkflowResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAccessWorkflowResponse {
    return new CreateAccessWorkflowResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CreateAccessWorkflowResponse
      | PlainMessage<CreateAccessWorkflowResponse>
      | undefined,
    b:
      | CreateAccessWorkflowResponse
      | PlainMessage<CreateAccessWorkflowResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateAccessWorkflowResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.GetAccessWorkflowRequest
 */
export class GetAccessWorkflowRequest extends Message<GetAccessWorkflowRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<GetAccessWorkflowRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.GetAccessWorkflowRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAccessWorkflowRequest {
    return new GetAccessWorkflowRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAccessWorkflowRequest {
    return new GetAccessWorkflowRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAccessWorkflowRequest {
    return new GetAccessWorkflowRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetAccessWorkflowRequest
      | PlainMessage<GetAccessWorkflowRequest>
      | undefined,
    b:
      | GetAccessWorkflowRequest
      | PlainMessage<GetAccessWorkflowRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(GetAccessWorkflowRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.GetAccessWorkflowResponse
 */
export class GetAccessWorkflowResponse extends Message<GetAccessWorkflowResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.AccessWorkflow workflow = 1;
   */
  workflow?: AccessWorkflow

  constructor(data?: PartialMessage<GetAccessWorkflowResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.GetAccessWorkflowResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'workflow', kind: 'message', T: AccessWorkflow }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAccessWorkflowResponse {
    return new GetAccessWorkflowResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAccessWorkflowResponse {
    return new GetAccessWorkflowResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAccessWorkflowResponse {
    return new GetAccessWorkflowResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetAccessWorkflowResponse
      | PlainMessage<GetAccessWorkflowResponse>
      | undefined,
    b:
      | GetAccessWorkflowResponse
      | PlainMessage<GetAccessWorkflowResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetAccessWorkflowResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.UpdateAccessWorkflowRequest
 */
export class UpdateAccessWorkflowRequest extends Message<UpdateAccessWorkflowRequest> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.AccessWorkflow workflow = 1;
   */
  workflow?: AccessWorkflow

  constructor(data?: PartialMessage<UpdateAccessWorkflowRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.UpdateAccessWorkflowRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'workflow', kind: 'message', T: AccessWorkflow }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateAccessWorkflowRequest {
    return new UpdateAccessWorkflowRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateAccessWorkflowRequest {
    return new UpdateAccessWorkflowRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateAccessWorkflowRequest {
    return new UpdateAccessWorkflowRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateAccessWorkflowRequest
      | PlainMessage<UpdateAccessWorkflowRequest>
      | undefined,
    b:
      | UpdateAccessWorkflowRequest
      | PlainMessage<UpdateAccessWorkflowRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateAccessWorkflowRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.UpdateAccessWorkflowResponse
 */
export class UpdateAccessWorkflowResponse extends Message<UpdateAccessWorkflowResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.AccessWorkflow workflow = 1;
   */
  workflow?: AccessWorkflow

  constructor(data?: PartialMessage<UpdateAccessWorkflowResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.UpdateAccessWorkflowResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'workflow', kind: 'message', T: AccessWorkflow }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateAccessWorkflowResponse {
    return new UpdateAccessWorkflowResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateAccessWorkflowResponse {
    return new UpdateAccessWorkflowResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateAccessWorkflowResponse {
    return new UpdateAccessWorkflowResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | UpdateAccessWorkflowResponse
      | PlainMessage<UpdateAccessWorkflowResponse>
      | undefined,
    b:
      | UpdateAccessWorkflowResponse
      | PlainMessage<UpdateAccessWorkflowResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateAccessWorkflowResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.DeleteAccessWorkflowRequest
 */
export class DeleteAccessWorkflowRequest extends Message<DeleteAccessWorkflowRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DeleteAccessWorkflowRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.DeleteAccessWorkflowRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteAccessWorkflowRequest {
    return new DeleteAccessWorkflowRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteAccessWorkflowRequest {
    return new DeleteAccessWorkflowRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteAccessWorkflowRequest {
    return new DeleteAccessWorkflowRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteAccessWorkflowRequest
      | PlainMessage<DeleteAccessWorkflowRequest>
      | undefined,
    b:
      | DeleteAccessWorkflowRequest
      | PlainMessage<DeleteAccessWorkflowRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteAccessWorkflowRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.DeleteAccessWorkflowResponse
 */
export class DeleteAccessWorkflowResponse extends Message<DeleteAccessWorkflowResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DeleteAccessWorkflowResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.DeleteAccessWorkflowResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteAccessWorkflowResponse {
    return new DeleteAccessWorkflowResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteAccessWorkflowResponse {
    return new DeleteAccessWorkflowResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteAccessWorkflowResponse {
    return new DeleteAccessWorkflowResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | DeleteAccessWorkflowResponse
      | PlainMessage<DeleteAccessWorkflowResponse>
      | undefined,
    b:
      | DeleteAccessWorkflowResponse
      | PlainMessage<DeleteAccessWorkflowResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteAccessWorkflowResponse, a, b)
  }
}
