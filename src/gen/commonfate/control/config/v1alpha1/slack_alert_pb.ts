// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/config/v1alpha1/slack_alert.proto (package commonfate.control.config.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * @generated from message commonfate.control.config.v1alpha1.CreateSlackAlertRequest
 */
export class CreateSlackAlertRequest extends Message<CreateSlackAlertRequest> {
  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = ''

  /**
   * @generated from field: string slack_channel_id = 3;
   */
  slackChannelId = ''

  /**
   * @generated from field: string slack_workspace_id = 4;
   */
  slackWorkspaceId = ''

  /**
   * @generated from field: optional string integration_id = 5;
   */
  integrationId?: string

  /**
   * @generated from field: bool use_web_console_for_approve_action = 6;
   */
  useWebConsoleForApproveAction = false

  constructor(data?: PartialMessage<CreateSlackAlertRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.CreateSlackAlertRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 2,
      name: 'workflow_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    {
      no: 3,
      name: 'slack_channel_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    {
      no: 4,
      name: 'slack_workspace_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    {
      no: 5,
      name: 'integration_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true
    },
    {
      no: 6,
      name: 'use_web_console_for_approve_action',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateSlackAlertRequest {
    return new CreateSlackAlertRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateSlackAlertRequest {
    return new CreateSlackAlertRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateSlackAlertRequest {
    return new CreateSlackAlertRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateSlackAlertRequest
      | PlainMessage<CreateSlackAlertRequest>
      | undefined,
    b:
      | CreateSlackAlertRequest
      | PlainMessage<CreateSlackAlertRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateSlackAlertRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.SlackAlert
 */
export class SlackAlert extends Message<SlackAlert> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = ''

  /**
   * @generated from field: string slack_channel_id = 3;
   */
  slackChannelId = ''

  /**
   * @generated from field: string slack_workspace_id = 4;
   */
  slackWorkspaceId = ''

  /**
   * @generated from field: optional string integration_id = 5;
   */
  integrationId?: string

  /**
   * @generated from field: bool use_web_console_for_approve_action = 6;
   */
  useWebConsoleForApproveAction = false

  constructor(data?: PartialMessage<SlackAlert>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.config.v1alpha1.SlackAlert'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'workflow_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    {
      no: 3,
      name: 'slack_channel_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    {
      no: 4,
      name: 'slack_workspace_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    {
      no: 5,
      name: 'integration_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true
    },
    {
      no: 6,
      name: 'use_web_console_for_approve_action',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SlackAlert {
    return new SlackAlert().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SlackAlert {
    return new SlackAlert().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SlackAlert {
    return new SlackAlert().fromJsonString(jsonString, options)
  }

  static equals(
    a: SlackAlert | PlainMessage<SlackAlert> | undefined,
    b: SlackAlert | PlainMessage<SlackAlert> | undefined
  ): boolean {
    return proto3.util.equals(SlackAlert, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.CreateSlackAlertResponse
 */
export class CreateSlackAlertResponse extends Message<CreateSlackAlertResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.SlackAlert alert = 1;
   */
  alert?: SlackAlert

  constructor(data?: PartialMessage<CreateSlackAlertResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.CreateSlackAlertResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'alert', kind: 'message', T: SlackAlert }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateSlackAlertResponse {
    return new CreateSlackAlertResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateSlackAlertResponse {
    return new CreateSlackAlertResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateSlackAlertResponse {
    return new CreateSlackAlertResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateSlackAlertResponse
      | PlainMessage<CreateSlackAlertResponse>
      | undefined,
    b:
      | CreateSlackAlertResponse
      | PlainMessage<CreateSlackAlertResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateSlackAlertResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.GetSlackAlertRequest
 */
export class GetSlackAlertRequest extends Message<GetSlackAlertRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<GetSlackAlertRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.GetSlackAlertRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSlackAlertRequest {
    return new GetSlackAlertRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSlackAlertRequest {
    return new GetSlackAlertRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSlackAlertRequest {
    return new GetSlackAlertRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetSlackAlertRequest | PlainMessage<GetSlackAlertRequest> | undefined,
    b: GetSlackAlertRequest | PlainMessage<GetSlackAlertRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetSlackAlertRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.GetSlackAlertResponse
 */
export class GetSlackAlertResponse extends Message<GetSlackAlertResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.SlackAlert alert = 1;
   */
  alert?: SlackAlert

  constructor(data?: PartialMessage<GetSlackAlertResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.GetSlackAlertResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'alert', kind: 'message', T: SlackAlert }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSlackAlertResponse {
    return new GetSlackAlertResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSlackAlertResponse {
    return new GetSlackAlertResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSlackAlertResponse {
    return new GetSlackAlertResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetSlackAlertResponse | PlainMessage<GetSlackAlertResponse> | undefined,
    b: GetSlackAlertResponse | PlainMessage<GetSlackAlertResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetSlackAlertResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.UpdateSlackAlertRequest
 */
export class UpdateSlackAlertRequest extends Message<UpdateSlackAlertRequest> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.SlackAlert alert = 1;
   */
  alert?: SlackAlert

  constructor(data?: PartialMessage<UpdateSlackAlertRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.UpdateSlackAlertRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'alert', kind: 'message', T: SlackAlert }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateSlackAlertRequest {
    return new UpdateSlackAlertRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateSlackAlertRequest {
    return new UpdateSlackAlertRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateSlackAlertRequest {
    return new UpdateSlackAlertRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateSlackAlertRequest
      | PlainMessage<UpdateSlackAlertRequest>
      | undefined,
    b:
      | UpdateSlackAlertRequest
      | PlainMessage<UpdateSlackAlertRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateSlackAlertRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.UpdateSlackAlertResponse
 */
export class UpdateSlackAlertResponse extends Message<UpdateSlackAlertResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.SlackAlert alert = 1;
   */
  alert?: SlackAlert

  constructor(data?: PartialMessage<UpdateSlackAlertResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.UpdateSlackAlertResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'alert', kind: 'message', T: SlackAlert }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateSlackAlertResponse {
    return new UpdateSlackAlertResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateSlackAlertResponse {
    return new UpdateSlackAlertResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateSlackAlertResponse {
    return new UpdateSlackAlertResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateSlackAlertResponse
      | PlainMessage<UpdateSlackAlertResponse>
      | undefined,
    b:
      | UpdateSlackAlertResponse
      | PlainMessage<UpdateSlackAlertResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateSlackAlertResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.DeleteSlackAlertRequest
 */
export class DeleteSlackAlertRequest extends Message<DeleteSlackAlertRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DeleteSlackAlertRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.DeleteSlackAlertRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteSlackAlertRequest {
    return new DeleteSlackAlertRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteSlackAlertRequest {
    return new DeleteSlackAlertRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteSlackAlertRequest {
    return new DeleteSlackAlertRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteSlackAlertRequest
      | PlainMessage<DeleteSlackAlertRequest>
      | undefined,
    b:
      | DeleteSlackAlertRequest
      | PlainMessage<DeleteSlackAlertRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteSlackAlertRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.DeleteSlackAlertResponse
 */
export class DeleteSlackAlertResponse extends Message<DeleteSlackAlertResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DeleteSlackAlertResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.DeleteSlackAlertResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteSlackAlertResponse {
    return new DeleteSlackAlertResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteSlackAlertResponse {
    return new DeleteSlackAlertResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteSlackAlertResponse {
    return new DeleteSlackAlertResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteSlackAlertResponse
      | PlainMessage<DeleteSlackAlertResponse>
      | undefined,
    b:
      | DeleteSlackAlertResponse
      | PlainMessage<DeleteSlackAlertResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteSlackAlertResponse, a, b)
  }
}
