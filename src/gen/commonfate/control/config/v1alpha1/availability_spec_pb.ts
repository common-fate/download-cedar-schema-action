// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/config/v1alpha1/availability_spec.proto (package commonfate.control.config.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { EID } from '../../../entity/v1alpha1/eid_pb.js'

/**
 * @generated from message commonfate.control.config.v1alpha1.AvailabilitySpec
 */
export class AvailabilitySpec extends Message<AvailabilitySpec> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string workflow_id = 2;
   */
  workflowId = ''

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID role = 3;
   */
  role?: EID

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID target = 4;
   */
  target?: EID

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID identity_domain = 6;
   */
  identityDomain?: EID

  constructor(data?: PartialMessage<AvailabilitySpec>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.AvailabilitySpec'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'workflow_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    { no: 3, name: 'role', kind: 'message', T: EID },
    { no: 4, name: 'target', kind: 'message', T: EID },
    { no: 6, name: 'identity_domain', kind: 'message', T: EID }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AvailabilitySpec {
    return new AvailabilitySpec().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AvailabilitySpec {
    return new AvailabilitySpec().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AvailabilitySpec {
    return new AvailabilitySpec().fromJsonString(jsonString, options)
  }

  static equals(
    a: AvailabilitySpec | PlainMessage<AvailabilitySpec> | undefined,
    b: AvailabilitySpec | PlainMessage<AvailabilitySpec> | undefined
  ): boolean {
    return proto3.util.equals(AvailabilitySpec, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.CreateAvailabilitySpecRequest
 */
export class CreateAvailabilitySpecRequest extends Message<CreateAvailabilitySpecRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = ''

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID role = 2;
   */
  role?: EID

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID target = 3;
   */
  target?: EID

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID identity_domain = 4;
   */
  identityDomain?: EID

  constructor(data?: PartialMessage<CreateAvailabilitySpecRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.CreateAvailabilitySpecRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'workflow_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    { no: 2, name: 'role', kind: 'message', T: EID },
    { no: 3, name: 'target', kind: 'message', T: EID },
    { no: 4, name: 'identity_domain', kind: 'message', T: EID }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAvailabilitySpecRequest {
    return new CreateAvailabilitySpecRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateAvailabilitySpecRequest {
    return new CreateAvailabilitySpecRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAvailabilitySpecRequest {
    return new CreateAvailabilitySpecRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CreateAvailabilitySpecRequest
      | PlainMessage<CreateAvailabilitySpecRequest>
      | undefined,
    b:
      | CreateAvailabilitySpecRequest
      | PlainMessage<CreateAvailabilitySpecRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateAvailabilitySpecRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.CreateAvailabilitySpecResponse
 */
export class CreateAvailabilitySpecResponse extends Message<CreateAvailabilitySpecResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.AvailabilitySpec availability_spec = 1;
   */
  availabilitySpec?: AvailabilitySpec

  constructor(data?: PartialMessage<CreateAvailabilitySpecResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.CreateAvailabilitySpecResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'availability_spec', kind: 'message', T: AvailabilitySpec }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateAvailabilitySpecResponse {
    return new CreateAvailabilitySpecResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateAvailabilitySpecResponse {
    return new CreateAvailabilitySpecResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateAvailabilitySpecResponse {
    return new CreateAvailabilitySpecResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CreateAvailabilitySpecResponse
      | PlainMessage<CreateAvailabilitySpecResponse>
      | undefined,
    b:
      | CreateAvailabilitySpecResponse
      | PlainMessage<CreateAvailabilitySpecResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateAvailabilitySpecResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.GetAvailabilitySpecRequest
 */
export class GetAvailabilitySpecRequest extends Message<GetAvailabilitySpecRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<GetAvailabilitySpecRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.GetAvailabilitySpecRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAvailabilitySpecRequest {
    return new GetAvailabilitySpecRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAvailabilitySpecRequest {
    return new GetAvailabilitySpecRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAvailabilitySpecRequest {
    return new GetAvailabilitySpecRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetAvailabilitySpecRequest
      | PlainMessage<GetAvailabilitySpecRequest>
      | undefined,
    b:
      | GetAvailabilitySpecRequest
      | PlainMessage<GetAvailabilitySpecRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(GetAvailabilitySpecRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.GetAvailabilitySpecResponse
 */
export class GetAvailabilitySpecResponse extends Message<GetAvailabilitySpecResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.AvailabilitySpec availability_spec = 1;
   */
  availabilitySpec?: AvailabilitySpec

  constructor(data?: PartialMessage<GetAvailabilitySpecResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.GetAvailabilitySpecResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'availability_spec', kind: 'message', T: AvailabilitySpec }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAvailabilitySpecResponse {
    return new GetAvailabilitySpecResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAvailabilitySpecResponse {
    return new GetAvailabilitySpecResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAvailabilitySpecResponse {
    return new GetAvailabilitySpecResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetAvailabilitySpecResponse
      | PlainMessage<GetAvailabilitySpecResponse>
      | undefined,
    b:
      | GetAvailabilitySpecResponse
      | PlainMessage<GetAvailabilitySpecResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetAvailabilitySpecResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.UpdateAvailabilitySpecRequest
 */
export class UpdateAvailabilitySpecRequest extends Message<UpdateAvailabilitySpecRequest> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.AvailabilitySpec availability_spec = 1;
   */
  availabilitySpec?: AvailabilitySpec

  constructor(data?: PartialMessage<UpdateAvailabilitySpecRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.UpdateAvailabilitySpecRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'availability_spec', kind: 'message', T: AvailabilitySpec }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateAvailabilitySpecRequest {
    return new UpdateAvailabilitySpecRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateAvailabilitySpecRequest {
    return new UpdateAvailabilitySpecRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateAvailabilitySpecRequest {
    return new UpdateAvailabilitySpecRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | UpdateAvailabilitySpecRequest
      | PlainMessage<UpdateAvailabilitySpecRequest>
      | undefined,
    b:
      | UpdateAvailabilitySpecRequest
      | PlainMessage<UpdateAvailabilitySpecRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateAvailabilitySpecRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.UpdateAvailabilitySpecResponse
 */
export class UpdateAvailabilitySpecResponse extends Message<UpdateAvailabilitySpecResponse> {
  /**
   * @generated from field: commonfate.control.config.v1alpha1.AvailabilitySpec availability_spec = 1;
   */
  availabilitySpec?: AvailabilitySpec

  constructor(data?: PartialMessage<UpdateAvailabilitySpecResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.UpdateAvailabilitySpecResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'availability_spec', kind: 'message', T: AvailabilitySpec }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateAvailabilitySpecResponse {
    return new UpdateAvailabilitySpecResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateAvailabilitySpecResponse {
    return new UpdateAvailabilitySpecResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateAvailabilitySpecResponse {
    return new UpdateAvailabilitySpecResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | UpdateAvailabilitySpecResponse
      | PlainMessage<UpdateAvailabilitySpecResponse>
      | undefined,
    b:
      | UpdateAvailabilitySpecResponse
      | PlainMessage<UpdateAvailabilitySpecResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateAvailabilitySpecResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.DeleteAvailabilitySpecRequest
 */
export class DeleteAvailabilitySpecRequest extends Message<DeleteAvailabilitySpecRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DeleteAvailabilitySpecRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.DeleteAvailabilitySpecRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteAvailabilitySpecRequest {
    return new DeleteAvailabilitySpecRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteAvailabilitySpecRequest {
    return new DeleteAvailabilitySpecRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteAvailabilitySpecRequest {
    return new DeleteAvailabilitySpecRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | DeleteAvailabilitySpecRequest
      | PlainMessage<DeleteAvailabilitySpecRequest>
      | undefined,
    b:
      | DeleteAvailabilitySpecRequest
      | PlainMessage<DeleteAvailabilitySpecRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteAvailabilitySpecRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.DeleteAvailabilitySpecResponse
 */
export class DeleteAvailabilitySpecResponse extends Message<DeleteAvailabilitySpecResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DeleteAvailabilitySpecResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.DeleteAvailabilitySpecResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteAvailabilitySpecResponse {
    return new DeleteAvailabilitySpecResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteAvailabilitySpecResponse {
    return new DeleteAvailabilitySpecResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteAvailabilitySpecResponse {
    return new DeleteAvailabilitySpecResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | DeleteAvailabilitySpecResponse
      | PlainMessage<DeleteAvailabilitySpecResponse>
      | undefined,
    b:
      | DeleteAvailabilitySpecResponse
      | PlainMessage<DeleteAvailabilitySpecResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteAvailabilitySpecResponse, a, b)
  }
}
