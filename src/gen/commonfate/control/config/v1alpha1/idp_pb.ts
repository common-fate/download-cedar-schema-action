// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/config/v1alpha1/idp.proto (package commonfate.control.config.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * @generated from message commonfate.control.config.v1alpha1.CreateIDPRequest
 */
export class CreateIDPRequest extends Message<CreateIDPRequest> {
  /**
   * @generated from field: string namespace = 2;
   */
  namespace = ''

  constructor(data?: PartialMessage<CreateIDPRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.CreateIDPRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: 'namespace', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateIDPRequest {
    return new CreateIDPRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateIDPRequest {
    return new CreateIDPRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateIDPRequest {
    return new CreateIDPRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateIDPRequest | PlainMessage<CreateIDPRequest> | undefined,
    b: CreateIDPRequest | PlainMessage<CreateIDPRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateIDPRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.CreateIDPResponse
 */
export class CreateIDPResponse extends Message<CreateIDPResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = ''

  constructor(data?: PartialMessage<CreateIDPResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.CreateIDPResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'namespace', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateIDPResponse {
    return new CreateIDPResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateIDPResponse {
    return new CreateIDPResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateIDPResponse {
    return new CreateIDPResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateIDPResponse | PlainMessage<CreateIDPResponse> | undefined,
    b: CreateIDPResponse | PlainMessage<CreateIDPResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateIDPResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.ReadIDPRequest
 */
export class ReadIDPRequest extends Message<ReadIDPRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = ''

  constructor(data?: PartialMessage<ReadIDPRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.config.v1alpha1.ReadIDPRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'namespace', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ReadIDPRequest {
    return new ReadIDPRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ReadIDPRequest {
    return new ReadIDPRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ReadIDPRequest {
    return new ReadIDPRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ReadIDPRequest | PlainMessage<ReadIDPRequest> | undefined,
    b: ReadIDPRequest | PlainMessage<ReadIDPRequest> | undefined
  ): boolean {
    return proto3.util.equals(ReadIDPRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.ReadIDPResponse
 */
export class ReadIDPResponse extends Message<ReadIDPResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = ''

  constructor(data?: PartialMessage<ReadIDPResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.ReadIDPResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'namespace', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ReadIDPResponse {
    return new ReadIDPResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ReadIDPResponse {
    return new ReadIDPResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ReadIDPResponse {
    return new ReadIDPResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ReadIDPResponse | PlainMessage<ReadIDPResponse> | undefined,
    b: ReadIDPResponse | PlainMessage<ReadIDPResponse> | undefined
  ): boolean {
    return proto3.util.equals(ReadIDPResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.UpdateIDPRequest
 */
export class UpdateIDPRequest extends Message<UpdateIDPRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = ''

  constructor(data?: PartialMessage<UpdateIDPRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.UpdateIDPRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'namespace', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateIDPRequest {
    return new UpdateIDPRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateIDPRequest {
    return new UpdateIDPRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateIDPRequest {
    return new UpdateIDPRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateIDPRequest | PlainMessage<UpdateIDPRequest> | undefined,
    b: UpdateIDPRequest | PlainMessage<UpdateIDPRequest> | undefined
  ): boolean {
    return proto3.util.equals(UpdateIDPRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.UpdateIDPResponse
 */
export class UpdateIDPResponse extends Message<UpdateIDPResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = ''

  constructor(data?: PartialMessage<UpdateIDPResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.UpdateIDPResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'namespace', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateIDPResponse {
    return new UpdateIDPResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateIDPResponse {
    return new UpdateIDPResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateIDPResponse {
    return new UpdateIDPResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateIDPResponse | PlainMessage<UpdateIDPResponse> | undefined,
    b: UpdateIDPResponse | PlainMessage<UpdateIDPResponse> | undefined
  ): boolean {
    return proto3.util.equals(UpdateIDPResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.DeleteIDPRequest
 */
export class DeleteIDPRequest extends Message<DeleteIDPRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DeleteIDPRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.DeleteIDPRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteIDPRequest {
    return new DeleteIDPRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteIDPRequest {
    return new DeleteIDPRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteIDPRequest {
    return new DeleteIDPRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteIDPRequest | PlainMessage<DeleteIDPRequest> | undefined,
    b: DeleteIDPRequest | PlainMessage<DeleteIDPRequest> | undefined
  ): boolean {
    return proto3.util.equals(DeleteIDPRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.config.v1alpha1.DeleteIDPResponse
 */
export class DeleteIDPResponse extends Message<DeleteIDPResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DeleteIDPResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.config.v1alpha1.DeleteIDPResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteIDPResponse {
    return new DeleteIDPResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteIDPResponse {
    return new DeleteIDPResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteIDPResponse {
    return new DeleteIDPResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeleteIDPResponse | PlainMessage<DeleteIDPResponse> | undefined,
    b: DeleteIDPResponse | PlainMessage<DeleteIDPResponse> | undefined
  ): boolean {
    return proto3.util.equals(DeleteIDPResponse, a, b)
  }
}
