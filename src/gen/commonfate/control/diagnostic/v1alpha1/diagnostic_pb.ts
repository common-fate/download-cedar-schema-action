// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/diagnostic/v1alpha1/diagnostic.proto (package commonfate.control.diagnostic.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3, protoInt64, Timestamp } from '@bufbuild/protobuf'

/**
 * @generated from enum commonfate.control.diagnostic.v1alpha1.JobState
 */
export enum JobState {
  /**
   * @generated from enum value: JOB_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: JOB_STATE_AVAILABLE = 1;
   */
  AVAILABLE = 1,

  /**
   * @generated from enum value: JOB_STATE_CANCELLED = 2;
   */
  CANCELLED = 2,

  /**
   * @generated from enum value: JOB_STATE_COMPLETED = 3;
   */
  COMPLETED = 3,

  /**
   * @generated from enum value: JOB_STATE_DISCARDED = 4;
   */
  DISCARDED = 4,

  /**
   * @generated from enum value: JOB_STATE_RETRYABLE = 5;
   */
  RETRYABLE = 5,

  /**
   * @generated from enum value: JOB_STATE_RUNNING = 6;
   */
  RUNNING = 6,

  /**
   * @generated from enum value: JOB_STATE_SCHEDULED = 7;
   */
  SCHEDULED = 7
}
// Retrieve enum metadata with: proto3.getEnumType(JobState)
proto3.util.setEnumType(
  JobState,
  'commonfate.control.diagnostic.v1alpha1.JobState',
  [
    { no: 0, name: 'JOB_STATE_UNSPECIFIED' },
    { no: 1, name: 'JOB_STATE_AVAILABLE' },
    { no: 2, name: 'JOB_STATE_CANCELLED' },
    { no: 3, name: 'JOB_STATE_COMPLETED' },
    { no: 4, name: 'JOB_STATE_DISCARDED' },
    { no: 5, name: 'JOB_STATE_RETRYABLE' },
    { no: 6, name: 'JOB_STATE_RUNNING' },
    { no: 7, name: 'JOB_STATE_SCHEDULED' }
  ]
)

/**
 * @generated from message commonfate.control.diagnostic.v1alpha1.GetOAuthTokenMetadataRequest
 */
export class GetOAuthTokenMetadataRequest extends Message<GetOAuthTokenMetadataRequest> {
  constructor(data?: PartialMessage<GetOAuthTokenMetadataRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.diagnostic.v1alpha1.GetOAuthTokenMetadataRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetOAuthTokenMetadataRequest {
    return new GetOAuthTokenMetadataRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetOAuthTokenMetadataRequest {
    return new GetOAuthTokenMetadataRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetOAuthTokenMetadataRequest {
    return new GetOAuthTokenMetadataRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | GetOAuthTokenMetadataRequest
      | PlainMessage<GetOAuthTokenMetadataRequest>
      | undefined,
    b:
      | GetOAuthTokenMetadataRequest
      | PlainMessage<GetOAuthTokenMetadataRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(GetOAuthTokenMetadataRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.diagnostic.v1alpha1.GetOAuthTokenMetadataResponse
 */
export class GetOAuthTokenMetadataResponse extends Message<GetOAuthTokenMetadataResponse> {
  /**
   * @generated from field: repeated commonfate.control.diagnostic.v1alpha1.OAuthTokenMetadata tokens = 1;
   */
  tokens: OAuthTokenMetadata[] = []

  constructor(data?: PartialMessage<GetOAuthTokenMetadataResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.diagnostic.v1alpha1.GetOAuthTokenMetadataResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'tokens',
      kind: 'message',
      T: OAuthTokenMetadata,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetOAuthTokenMetadataResponse {
    return new GetOAuthTokenMetadataResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetOAuthTokenMetadataResponse {
    return new GetOAuthTokenMetadataResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetOAuthTokenMetadataResponse {
    return new GetOAuthTokenMetadataResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | GetOAuthTokenMetadataResponse
      | PlainMessage<GetOAuthTokenMetadataResponse>
      | undefined,
    b:
      | GetOAuthTokenMetadataResponse
      | PlainMessage<GetOAuthTokenMetadataResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetOAuthTokenMetadataResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.diagnostic.v1alpha1.OAuthTokenMetadata
 */
export class OAuthTokenMetadata extends Message<OAuthTokenMetadata> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string app_name = 2;
   */
  appName = ''

  /**
   * @generated from field: google.protobuf.Timestamp expires_at = 3;
   */
  expiresAt?: Timestamp

  constructor(data?: PartialMessage<OAuthTokenMetadata>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.diagnostic.v1alpha1.OAuthTokenMetadata'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'app_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'expires_at', kind: 'message', T: Timestamp }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): OAuthTokenMetadata {
    return new OAuthTokenMetadata().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): OAuthTokenMetadata {
    return new OAuthTokenMetadata().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): OAuthTokenMetadata {
    return new OAuthTokenMetadata().fromJsonString(jsonString, options)
  }

  static equals(
    a: OAuthTokenMetadata | PlainMessage<OAuthTokenMetadata> | undefined,
    b: OAuthTokenMetadata | PlainMessage<OAuthTokenMetadata> | undefined
  ): boolean {
    return proto3.util.equals(OAuthTokenMetadata, a, b)
  }
}

/**
 * @generated from message commonfate.control.diagnostic.v1alpha1.ListBackgroundJobsRequest
 */
export class ListBackgroundJobsRequest extends Message<ListBackgroundJobsRequest> {
  /**
   * Optionally filter jobs by kind, supplying an empty list will return jobs for all kinds
   *
   * @generated from field: repeated string kinds = 1;
   */
  kinds: string[] = []

  /**
   * by default requests will return upp to 100 jobs, set this between 1 and 10000 to retrieve more jobs
   *
   * @generated from field: optional int64 count = 2;
   */
  count?: bigint

  /**
   * The job state to filter for
   *
   * @generated from field: commonfate.control.diagnostic.v1alpha1.JobState state = 3;
   */
  state = JobState.UNSPECIFIED

  constructor(data?: PartialMessage<ListBackgroundJobsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.diagnostic.v1alpha1.ListBackgroundJobsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'kinds',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true
    },
    {
      no: 2,
      name: 'count',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
      opt: true
    },
    { no: 3, name: 'state', kind: 'enum', T: proto3.getEnumType(JobState) }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListBackgroundJobsRequest {
    return new ListBackgroundJobsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListBackgroundJobsRequest {
    return new ListBackgroundJobsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListBackgroundJobsRequest {
    return new ListBackgroundJobsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ListBackgroundJobsRequest
      | PlainMessage<ListBackgroundJobsRequest>
      | undefined,
    b:
      | ListBackgroundJobsRequest
      | PlainMessage<ListBackgroundJobsRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(ListBackgroundJobsRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.diagnostic.v1alpha1.ListBackgroundJobsResponse
 */
export class ListBackgroundJobsResponse extends Message<ListBackgroundJobsResponse> {
  /**
   * @generated from field: repeated commonfate.control.diagnostic.v1alpha1.Job jobs = 1;
   */
  jobs: Job[] = []

  constructor(data?: PartialMessage<ListBackgroundJobsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.diagnostic.v1alpha1.ListBackgroundJobsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'jobs', kind: 'message', T: Job, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListBackgroundJobsResponse {
    return new ListBackgroundJobsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListBackgroundJobsResponse {
    return new ListBackgroundJobsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListBackgroundJobsResponse {
    return new ListBackgroundJobsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ListBackgroundJobsResponse
      | PlainMessage<ListBackgroundJobsResponse>
      | undefined,
    b:
      | ListBackgroundJobsResponse
      | PlainMessage<ListBackgroundJobsResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(ListBackgroundJobsResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.diagnostic.v1alpha1.Job
 */
export class Job extends Message<Job> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero

  /**
   * Attempt is the attempt number of the job. Jobs are inserted at 0, the
   * number is incremented to 1 the first time work its worked, and may
   * increment further if it's either snoozed or errors.
   *
   * @generated from field: int64 attempt = 2;
   */
  attempt = protoInt64.zero

  /**
   * AttemptedAt is the time that the job was last worked. Starts out as `nil`
   * on a new insert.
   *
   * @generated from field: google.protobuf.Timestamp attempted_at = 3;
   */
  attemptedAt?: Timestamp

  /**
   * AttemptedBy is the set of client IDs that have worked this job.
   *
   * @generated from field: repeated string attempted_by = 4;
   */
  attemptedBy: string[] = []

  /**
   * CreatedAt is when the job record was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp

  /**
   * EncodedArgs is the job's JobArgs encoded as JSON.
   *
   * @generated from field: bytes encoded_args = 6;
   */
  encodedArgs = new Uint8Array(0)

  /**
   * Errors is a set of errors that occurred when the job was worked, one for
   * each attempt. Ordered from earliest error to the latest error.
   *
   * @generated from field: repeated commonfate.control.diagnostic.v1alpha1.AttemptError errors = 7;
   */
  errors: AttemptError[] = []

  /**
   * FinalizedAt is the time at which the job was "finalized", meaning it was
   * either completed successfully or errored for the last time such that
   * it'll no longer be retried.
   *
   * @generated from field: google.protobuf.Timestamp finalized_at = 8;
   */
  finalizedAt?: Timestamp

  /**
   * Kind uniquely identifies the type of job and instructs which worker
   * should work it. It is set at insertion time via `Kind()` on the
   * `JobArgs`.
   *
   * @generated from field: string kind = 9;
   */
  kind = ''

  /**
   * MaxAttempts is the maximum number of attempts that the job will be tried
   * before it errors for the last time and will no longer be worked.
   *
   * Extracted (in order of precedence) from job-specific InsertOpts
   * on Insert, from the worker level InsertOpts from JobArgsWithInsertOpts,
   * or from a client's default value.
   *
   * @generated from field: int64 max_attempts = 10;
   */
  maxAttempts = protoInt64.zero

  /**
   * Metadata is a field for storing arbitrary metadata on a job. It should
   * always be a valid JSON object payload, and users should not overwrite or
   * remove anything stored in this field by River.
   *
   * @generated from field: bytes metadata = 11;
   */
  metadata = new Uint8Array(0)

  /**
   * Priority is the priority of the job, with 1 being the highest priority and
   * 4 being the lowest. When fetching available jobs to work, the highest
   * priority jobs will always be fetched before any lower priority jobs are
   * fetched. Note that if your workers are swamped with more high-priority jobs
   * then they can handle, lower priority jobs may not be fetched.
   *
   * @generated from field: int64 priority = 12;
   */
  priority = protoInt64.zero

  /**
   * Queue is the name of the queue where the job will be worked. Queues can
   * be configured independently and be used to isolate jobs.
   *
   * Extracted from either specific InsertOpts on Insert, or InsertOpts from
   * JobArgsWithInsertOpts, or a client's default value.
   *
   * @generated from field: string queue = 13;
   */
  queue = ''

  /**
   * ScheduledAt is when the job is scheduled to become available to be
   * worked. Jobs default to running immediately, but may be scheduled
   * for the future when they're inserted. They may also be scheduled for
   * later because they were snoozed or because they errored and have
   * additional retry attempts remaining.
   *
   * @generated from field: google.protobuf.Timestamp scheduled_at = 14;
   */
  scheduledAt?: Timestamp

  /**
   * State is the state of job like `available` or `completed`. Jobs are
   * `available` when they're first inserted.
   *
   * @generated from field: string state = 15;
   */
  state = ''

  /**
   * Tags are an arbitrary list of keywords to add to the job. They have no
   * functional behavior and are meant entirely as a user-specified construct
   * to help group and categorize jobs.
   *
   * @generated from field: repeated string tags = 16;
   */
  tags: string[] = []

  constructor(data?: PartialMessage<Job>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.diagnostic.v1alpha1.Job'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'attempt', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: 'attempted_at', kind: 'message', T: Timestamp },
    {
      no: 4,
      name: 'attempted_by',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true
    },
    { no: 5, name: 'created_at', kind: 'message', T: Timestamp },
    {
      no: 6,
      name: 'encoded_args',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */
    },
    { no: 7, name: 'errors', kind: 'message', T: AttemptError, repeated: true },
    { no: 8, name: 'finalized_at', kind: 'message', T: Timestamp },
    { no: 9, name: 'kind', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 10,
      name: 'max_attempts',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */
    },
    { no: 11, name: 'metadata', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 12, name: 'priority', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: 'queue', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 14, name: 'scheduled_at', kind: 'message', T: Timestamp },
    { no: 15, name: 'state', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 16,
      name: 'tags',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Job {
    return new Job().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Job {
    return new Job().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Job {
    return new Job().fromJsonString(jsonString, options)
  }

  static equals(
    a: Job | PlainMessage<Job> | undefined,
    b: Job | PlainMessage<Job> | undefined
  ): boolean {
    return proto3.util.equals(Job, a, b)
  }
}

/**
 * AttemptError is an error from a single job attempt that failed due to an
 * error or a panic.
 *
 * @generated from message commonfate.control.diagnostic.v1alpha1.AttemptError
 */
export class AttemptError extends Message<AttemptError> {
  /**
   * At is the time at which the error occurred.
   *
   * @generated from field: google.protobuf.Timestamp at = 1;
   */
  at?: Timestamp

  /**
   * Attempt is the attempt number on which the error occurred (maps to
   * Attempt on a job row).
   *
   * @generated from field: int64 attempt = 2;
   */
  attempt = protoInt64.zero

  /**
   * Error contains the stringified error of an error returned from a job or a
   * panic value in case of a panic.
   *
   * @generated from field: string error = 3;
   */
  error = ''

  /**
   * Trace contains a stack trace from a job that panicked. The trace is
   * produced by invoking `debug.Trace()`.
   *
   * @generated from field: string trace = 4;
   */
  trace = ''

  constructor(data?: PartialMessage<AttemptError>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.diagnostic.v1alpha1.AttemptError'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'at', kind: 'message', T: Timestamp },
    { no: 2, name: 'attempt', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'trace', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AttemptError {
    return new AttemptError().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AttemptError {
    return new AttemptError().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AttemptError {
    return new AttemptError().fromJsonString(jsonString, options)
  }

  static equals(
    a: AttemptError | PlainMessage<AttemptError> | undefined,
    b: AttemptError | PlainMessage<AttemptError> | undefined
  ): boolean {
    return proto3.util.equals(AttemptError, a, b)
  }
}

/**
 * AllDiagnostics is used client-side to combine and serialise all collected diagnostics into a single JSON.
 *
 * @generated from message commonfate.control.diagnostic.v1alpha1.AllDiagnostics
 */
export class AllDiagnostics extends Message<AllDiagnostics> {
  /**
   * @generated from field: commonfate.control.diagnostic.v1alpha1.GetOAuthTokenMetadataResponse oauth_token_metadata = 1;
   */
  oauthTokenMetadata?: GetOAuthTokenMetadataResponse

  constructor(data?: PartialMessage<AllDiagnostics>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.diagnostic.v1alpha1.AllDiagnostics'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'oauth_token_metadata',
      kind: 'message',
      T: GetOAuthTokenMetadataResponse
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AllDiagnostics {
    return new AllDiagnostics().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AllDiagnostics {
    return new AllDiagnostics().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AllDiagnostics {
    return new AllDiagnostics().fromJsonString(jsonString, options)
  }

  static equals(
    a: AllDiagnostics | PlainMessage<AllDiagnostics> | undefined,
    b: AllDiagnostics | PlainMessage<AllDiagnostics> | undefined
  ): boolean {
    return proto3.util.equals(AllDiagnostics, a, b)
  }
}
