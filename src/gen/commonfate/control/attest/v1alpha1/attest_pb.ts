// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/attest/v1alpha1/attest.proto (package commonfate.control.attest.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { Attestation, Device } from './attestation_pb.js'

/**
 * @generated from message commonfate.control.attest.v1alpha1.RegisterDeviceRequest
 */
export class RegisterDeviceRequest extends Message<RegisterDeviceRequest> {
  /**
   * @generated from field: commonfate.control.attest.v1alpha1.Attestation attestation = 1;
   */
  attestation?: Attestation

  /**
   * @generated from field: commonfate.control.attest.v1alpha1.Device device = 3;
   */
  device?: Device

  constructor(data?: PartialMessage<RegisterDeviceRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.attest.v1alpha1.RegisterDeviceRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'attestation', kind: 'message', T: Attestation },
    { no: 3, name: 'device', kind: 'message', T: Device }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): RegisterDeviceRequest {
    return new RegisterDeviceRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): RegisterDeviceRequest {
    return new RegisterDeviceRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): RegisterDeviceRequest {
    return new RegisterDeviceRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: RegisterDeviceRequest | PlainMessage<RegisterDeviceRequest> | undefined,
    b: RegisterDeviceRequest | PlainMessage<RegisterDeviceRequest> | undefined
  ): boolean {
    return proto3.util.equals(RegisterDeviceRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.attest.v1alpha1.RegisterDeviceResponse
 */
export class RegisterDeviceResponse extends Message<RegisterDeviceResponse> {
  /**
   * @generated from field: string device_id = 1;
   */
  deviceId = ''

  /**
   * true if the device already exists
   *
   * @generated from field: bool already_exists = 2;
   */
  alreadyExists = false

  constructor(data?: PartialMessage<RegisterDeviceResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.attest.v1alpha1.RegisterDeviceResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'device_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'already_exists',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): RegisterDeviceResponse {
    return new RegisterDeviceResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): RegisterDeviceResponse {
    return new RegisterDeviceResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): RegisterDeviceResponse {
    return new RegisterDeviceResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | RegisterDeviceResponse
      | PlainMessage<RegisterDeviceResponse>
      | undefined,
    b: RegisterDeviceResponse | PlainMessage<RegisterDeviceResponse> | undefined
  ): boolean {
    return proto3.util.equals(RegisterDeviceResponse, a, b)
  }
}
