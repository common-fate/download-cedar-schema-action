// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/attest/v1alpha1/attestation.proto (package commonfate.control.attest.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf'

/**
 * @generated from enum commonfate.control.attest.v1alpha1.AttestationType
 */
export enum AttestationType {
  /**
   * @generated from enum value: ATTESTATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ATTESTATION_TYPE_DEVICE_REGISTRATION = 1;
   */
  DEVICE_REGISTRATION = 1,

  /**
   * @generated from enum value: ATTESTATION_TYPE_ACCESS_REQUEST = 2;
   */
  ACCESS_REQUEST = 2
}
// Retrieve enum metadata with: proto3.getEnumType(AttestationType)
proto3.util.setEnumType(
  AttestationType,
  'commonfate.control.attest.v1alpha1.AttestationType',
  [
    { no: 0, name: 'ATTESTATION_TYPE_UNSPECIFIED' },
    { no: 1, name: 'ATTESTATION_TYPE_DEVICE_REGISTRATION' },
    { no: 2, name: 'ATTESTATION_TYPE_ACCESS_REQUEST' }
  ]
)

/**
 * @generated from message commonfate.control.attest.v1alpha1.Header
 */
export class Header extends Message<Header> {
  /**
   * should always be '1'
   *
   * @generated from field: int64 version = 1;
   */
  version = protoInt64.zero

  /**
   * the current timestamp in milliseconds since Unix epoch
   *
   * @generated from field: int64 timestamp = 2;
   */
  timestamp = protoInt64.zero

  /**
   * the type of message being signed
   *
   * @generated from field: commonfate.control.attest.v1alpha1.AttestationType type = 3;
   */
  type = AttestationType.UNSPECIFIED

  /**
   * the SHA256 digest of the message contents
   *
   * @generated from field: bytes content_digest = 4;
   */
  contentDigest = new Uint8Array(0)

  /**
   * the ID of the key that signed the message
   *
   * @generated from field: string kid = 5;
   */
  kid = ''

  constructor(data?: PartialMessage<Header>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.attest.v1alpha1.Header'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'version', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: 'timestamp', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    {
      no: 3,
      name: 'type',
      kind: 'enum',
      T: proto3.getEnumType(AttestationType)
    },
    {
      no: 4,
      name: 'content_digest',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */
    },
    { no: 5, name: 'kid', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Header {
    return new Header().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Header {
    return new Header().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Header {
    return new Header().fromJsonString(jsonString, options)
  }

  static equals(
    a: Header | PlainMessage<Header> | undefined,
    b: Header | PlainMessage<Header> | undefined
  ): boolean {
    return proto3.util.equals(Header, a, b)
  }
}

/**
 * @generated from message commonfate.control.attest.v1alpha1.Device
 */
export class Device extends Message<Device> {
  /**
   * @generated from field: string serial_number = 2;
   */
  serialNumber = ''

  /**
   * @generated from field: string uuid = 3;
   */
  uuid = ''

  /**
   * @generated from field: string platform = 4;
   */
  platform = ''

  /**
   * @generated from field: string architecture = 5;
   */
  architecture = ''

  /**
   * @generated from field: string hostname = 6;
   */
  hostname = ''

  /**
   * @generated from field: string kernel_release = 7;
   */
  kernelRelease = ''

  /**
   * @generated from field: string kernel_version = 8;
   */
  kernelVersion = ''

  constructor(data?: PartialMessage<Device>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.attest.v1alpha1.Device'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 2,
      name: 'serial_number',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    { no: 3, name: 'uuid', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'platform', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 5,
      name: 'architecture',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    { no: 6, name: 'hostname', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 7,
      name: 'kernel_release',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    {
      no: 8,
      name: 'kernel_version',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Device {
    return new Device().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Device {
    return new Device().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Device {
    return new Device().fromJsonString(jsonString, options)
  }

  static equals(
    a: Device | PlainMessage<Device> | undefined,
    b: Device | PlainMessage<Device> | undefined
  ): boolean {
    return proto3.util.equals(Device, a, b)
  }
}

/**
 * @generated from message commonfate.control.attest.v1alpha1.Attestation
 */
export class Attestation extends Message<Attestation> {
  /**
   * @generated from field: commonfate.control.attest.v1alpha1.Header header = 1;
   */
  header?: Header

  /**
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0)

  constructor(data?: PartialMessage<Attestation>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.attest.v1alpha1.Attestation'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'header', kind: 'message', T: Header },
    { no: 2, name: 'signature', kind: 'scalar', T: 12 /* ScalarType.BYTES */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Attestation {
    return new Attestation().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Attestation {
    return new Attestation().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Attestation {
    return new Attestation().fromJsonString(jsonString, options)
  }

  static equals(
    a: Attestation | PlainMessage<Attestation> | undefined,
    b: Attestation | PlainMessage<Attestation> | undefined
  ): boolean {
    return proto3.util.equals(Attestation, a, b)
  }
}
