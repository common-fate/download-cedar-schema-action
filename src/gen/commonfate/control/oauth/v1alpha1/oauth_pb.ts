// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/oauth/v1alpha1/oauth.proto (package commonfate.control.oauth.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * @generated from message commonfate.control.oauth.v1alpha1.CreatePagerDutyIntegrationRequest
 */
export class CreatePagerDutyIntegrationRequest extends Message<CreatePagerDutyIntegrationRequest> {
  constructor(data?: PartialMessage<CreatePagerDutyIntegrationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.CreatePagerDutyIntegrationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreatePagerDutyIntegrationRequest {
    return new CreatePagerDutyIntegrationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreatePagerDutyIntegrationRequest {
    return new CreatePagerDutyIntegrationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreatePagerDutyIntegrationRequest {
    return new CreatePagerDutyIntegrationRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CreatePagerDutyIntegrationRequest
      | PlainMessage<CreatePagerDutyIntegrationRequest>
      | undefined,
    b:
      | CreatePagerDutyIntegrationRequest
      | PlainMessage<CreatePagerDutyIntegrationRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CreatePagerDutyIntegrationRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.CreatePagerDutyIntegrationResponse
 */
export class CreatePagerDutyIntegrationResponse extends Message<CreatePagerDutyIntegrationResponse> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = ''

  constructor(data?: PartialMessage<CreatePagerDutyIntegrationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.CreatePagerDutyIntegrationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreatePagerDutyIntegrationResponse {
    return new CreatePagerDutyIntegrationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreatePagerDutyIntegrationResponse {
    return new CreatePagerDutyIntegrationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreatePagerDutyIntegrationResponse {
    return new CreatePagerDutyIntegrationResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CreatePagerDutyIntegrationResponse
      | PlainMessage<CreatePagerDutyIntegrationResponse>
      | undefined,
    b:
      | CreatePagerDutyIntegrationResponse
      | PlainMessage<CreatePagerDutyIntegrationResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreatePagerDutyIntegrationResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.GetPagerDutyIntegrationRequest
 */
export class GetPagerDutyIntegrationRequest extends Message<GetPagerDutyIntegrationRequest> {
  constructor(data?: PartialMessage<GetPagerDutyIntegrationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.GetPagerDutyIntegrationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetPagerDutyIntegrationRequest {
    return new GetPagerDutyIntegrationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetPagerDutyIntegrationRequest {
    return new GetPagerDutyIntegrationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetPagerDutyIntegrationRequest {
    return new GetPagerDutyIntegrationRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | GetPagerDutyIntegrationRequest
      | PlainMessage<GetPagerDutyIntegrationRequest>
      | undefined,
    b:
      | GetPagerDutyIntegrationRequest
      | PlainMessage<GetPagerDutyIntegrationRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(GetPagerDutyIntegrationRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.GetPagerDutyIntegrationResponse
 */
export class GetPagerDutyIntegrationResponse extends Message<GetPagerDutyIntegrationResponse> {
  /**
   * @generated from field: bool active = 1;
   */
  active = false

  constructor(data?: PartialMessage<GetPagerDutyIntegrationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.GetPagerDutyIntegrationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'active', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetPagerDutyIntegrationResponse {
    return new GetPagerDutyIntegrationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetPagerDutyIntegrationResponse {
    return new GetPagerDutyIntegrationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetPagerDutyIntegrationResponse {
    return new GetPagerDutyIntegrationResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | GetPagerDutyIntegrationResponse
      | PlainMessage<GetPagerDutyIntegrationResponse>
      | undefined,
    b:
      | GetPagerDutyIntegrationResponse
      | PlainMessage<GetPagerDutyIntegrationResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetPagerDutyIntegrationResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.RemovePagerDutyIntegrationRequest
 */
export class RemovePagerDutyIntegrationRequest extends Message<RemovePagerDutyIntegrationRequest> {
  constructor(data?: PartialMessage<RemovePagerDutyIntegrationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.RemovePagerDutyIntegrationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): RemovePagerDutyIntegrationRequest {
    return new RemovePagerDutyIntegrationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): RemovePagerDutyIntegrationRequest {
    return new RemovePagerDutyIntegrationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): RemovePagerDutyIntegrationRequest {
    return new RemovePagerDutyIntegrationRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | RemovePagerDutyIntegrationRequest
      | PlainMessage<RemovePagerDutyIntegrationRequest>
      | undefined,
    b:
      | RemovePagerDutyIntegrationRequest
      | PlainMessage<RemovePagerDutyIntegrationRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(RemovePagerDutyIntegrationRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.RemovePagerDutyIntegrationResponse
 */
export class RemovePagerDutyIntegrationResponse extends Message<RemovePagerDutyIntegrationResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<RemovePagerDutyIntegrationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.RemovePagerDutyIntegrationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): RemovePagerDutyIntegrationResponse {
    return new RemovePagerDutyIntegrationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): RemovePagerDutyIntegrationResponse {
    return new RemovePagerDutyIntegrationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): RemovePagerDutyIntegrationResponse {
    return new RemovePagerDutyIntegrationResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | RemovePagerDutyIntegrationResponse
      | PlainMessage<RemovePagerDutyIntegrationResponse>
      | undefined,
    b:
      | RemovePagerDutyIntegrationResponse
      | PlainMessage<RemovePagerDutyIntegrationResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(RemovePagerDutyIntegrationResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.CreateSlackIntegrationRequest
 */
export class CreateSlackIntegrationRequest extends Message<CreateSlackIntegrationRequest> {
  constructor(data?: PartialMessage<CreateSlackIntegrationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.CreateSlackIntegrationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateSlackIntegrationRequest {
    return new CreateSlackIntegrationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateSlackIntegrationRequest {
    return new CreateSlackIntegrationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateSlackIntegrationRequest {
    return new CreateSlackIntegrationRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CreateSlackIntegrationRequest
      | PlainMessage<CreateSlackIntegrationRequest>
      | undefined,
    b:
      | CreateSlackIntegrationRequest
      | PlainMessage<CreateSlackIntegrationRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateSlackIntegrationRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.CreateSlackIntegrationResponse
 */
export class CreateSlackIntegrationResponse extends Message<CreateSlackIntegrationResponse> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = ''

  constructor(data?: PartialMessage<CreateSlackIntegrationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.CreateSlackIntegrationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateSlackIntegrationResponse {
    return new CreateSlackIntegrationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateSlackIntegrationResponse {
    return new CreateSlackIntegrationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateSlackIntegrationResponse {
    return new CreateSlackIntegrationResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CreateSlackIntegrationResponse
      | PlainMessage<CreateSlackIntegrationResponse>
      | undefined,
    b:
      | CreateSlackIntegrationResponse
      | PlainMessage<CreateSlackIntegrationResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateSlackIntegrationResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.GetSlackIntegrationRequest
 */
export class GetSlackIntegrationRequest extends Message<GetSlackIntegrationRequest> {
  constructor(data?: PartialMessage<GetSlackIntegrationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.GetSlackIntegrationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSlackIntegrationRequest {
    return new GetSlackIntegrationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSlackIntegrationRequest {
    return new GetSlackIntegrationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSlackIntegrationRequest {
    return new GetSlackIntegrationRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetSlackIntegrationRequest
      | PlainMessage<GetSlackIntegrationRequest>
      | undefined,
    b:
      | GetSlackIntegrationRequest
      | PlainMessage<GetSlackIntegrationRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(GetSlackIntegrationRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.GetSlackIntegrationResponse
 */
export class GetSlackIntegrationResponse extends Message<GetSlackIntegrationResponse> {
  /**
   * @generated from field: bool active = 1;
   */
  active = false

  constructor(data?: PartialMessage<GetSlackIntegrationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.GetSlackIntegrationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'active', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSlackIntegrationResponse {
    return new GetSlackIntegrationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSlackIntegrationResponse {
    return new GetSlackIntegrationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSlackIntegrationResponse {
    return new GetSlackIntegrationResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetSlackIntegrationResponse
      | PlainMessage<GetSlackIntegrationResponse>
      | undefined,
    b:
      | GetSlackIntegrationResponse
      | PlainMessage<GetSlackIntegrationResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetSlackIntegrationResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.RemoveSlackIntegrationRequest
 */
export class RemoveSlackIntegrationRequest extends Message<RemoveSlackIntegrationRequest> {
  constructor(data?: PartialMessage<RemoveSlackIntegrationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.RemoveSlackIntegrationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): RemoveSlackIntegrationRequest {
    return new RemoveSlackIntegrationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): RemoveSlackIntegrationRequest {
    return new RemoveSlackIntegrationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): RemoveSlackIntegrationRequest {
    return new RemoveSlackIntegrationRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | RemoveSlackIntegrationRequest
      | PlainMessage<RemoveSlackIntegrationRequest>
      | undefined,
    b:
      | RemoveSlackIntegrationRequest
      | PlainMessage<RemoveSlackIntegrationRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(RemoveSlackIntegrationRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.oauth.v1alpha1.RemoveSlackIntegrationResponse
 */
export class RemoveSlackIntegrationResponse extends Message<RemoveSlackIntegrationResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false

  constructor(data?: PartialMessage<RemoveSlackIntegrationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.oauth.v1alpha1.RemoveSlackIntegrationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): RemoveSlackIntegrationResponse {
    return new RemoveSlackIntegrationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): RemoveSlackIntegrationResponse {
    return new RemoveSlackIntegrationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): RemoveSlackIntegrationResponse {
    return new RemoveSlackIntegrationResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | RemoveSlackIntegrationResponse
      | PlainMessage<RemoveSlackIntegrationResponse>
      | undefined,
    b:
      | RemoveSlackIntegrationResponse
      | PlainMessage<RemoveSlackIntegrationResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(RemoveSlackIntegrationResponse, a, b)
  }
}
