// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/log/v1alpha1/authz_eval.proto (package commonfate.control.log.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3, Timestamp } from '@bufbuild/protobuf'
import {
  DebugEvaluation,
  Decision,
  Evaluation
} from '../../../authz/v1alpha1/evaluation_pb.js'
import { EID } from '../../../entity/v1alpha1/eid_pb.js'

/**
 * @generated from enum commonfate.control.log.v1alpha1.TimeComparison
 */
export enum TimeComparison {
  /**
   * @generated from enum value: TIME_COMPARISON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Events which occurred before the specified time.
   *
   * @generated from enum value: TIME_COMPARISON_BEFORE = 1;
   */
  BEFORE = 1,

  /**
   * Events which occurred after the specified time.
   *
   * @generated from enum value: TIME_COMPARISON_AFTER = 2;
   */
  AFTER = 2
}
// Retrieve enum metadata with: proto3.getEnumType(TimeComparison)
proto3.util.setEnumType(
  TimeComparison,
  'commonfate.control.log.v1alpha1.TimeComparison',
  [
    { no: 0, name: 'TIME_COMPARISON_UNSPECIFIED' },
    { no: 1, name: 'TIME_COMPARISON_BEFORE' },
    { no: 2, name: 'TIME_COMPARISON_AFTER' }
  ]
)

/**
 * @generated from enum commonfate.control.log.v1alpha1.BoolComparison
 */
export enum BoolComparison {
  /**
   * @generated from enum value: BOOL_COMPARISON_UNSPECIFIED = 0;
   */
  BOOL_COMPARISON_UNSPECIFIED = 0,

  /**
   * Equal to the provided value.
   *
   * @generated from enum value: BOOL_COMPARISON_EQUAL = 1;
   */
  BOOL_COMPARISON_EQUAL = 1,

  /**
   * Not equal to the provided value.
   *
   * @generated from enum value: TIME_COMPARISON_NOT_EQUAL = 2;
   */
  TIME_COMPARISON_NOT_EQUAL = 2
}
// Retrieve enum metadata with: proto3.getEnumType(BoolComparison)
proto3.util.setEnumType(
  BoolComparison,
  'commonfate.control.log.v1alpha1.BoolComparison',
  [
    { no: 0, name: 'BOOL_COMPARISON_UNSPECIFIED' },
    { no: 1, name: 'BOOL_COMPARISON_EQUAL' },
    { no: 2, name: 'TIME_COMPARISON_NOT_EQUAL' }
  ]
)

/**
 * @generated from message commonfate.control.log.v1alpha1.QueryEvaluationsRequest
 */
export class QueryEvaluationsRequest extends Message<QueryEvaluationsRequest> {
  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 1;
   */
  pageToken = ''

  /**
   * Filters for the query. Events matching *all* filters will be returned.
   *
   * @generated from field: repeated commonfate.control.log.v1alpha1.Filter filters = 2;
   */
  filters: Filter[] = []

  constructor(data?: PartialMessage<QueryEvaluationsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.log.v1alpha1.QueryEvaluationsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'filters', kind: 'message', T: Filter, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryEvaluationsRequest {
    return new QueryEvaluationsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryEvaluationsRequest {
    return new QueryEvaluationsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryEvaluationsRequest {
    return new QueryEvaluationsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryEvaluationsRequest
      | PlainMessage<QueryEvaluationsRequest>
      | undefined,
    b:
      | QueryEvaluationsRequest
      | PlainMessage<QueryEvaluationsRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryEvaluationsRequest, a, b)
  }
}

/**
 * Filters events with a particular authorization decision
 *
 * @generated from message commonfate.control.log.v1alpha1.DecisionFilter
 */
export class DecisionFilter extends Message<DecisionFilter> {
  /**
   * @generated from field: commonfate.authz.v1alpha1.Decision decision = 1;
   */
  decision = Decision.UNSPECIFIED

  constructor(data?: PartialMessage<DecisionFilter>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.log.v1alpha1.DecisionFilter'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'decision', kind: 'enum', T: proto3.getEnumType(Decision) }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DecisionFilter {
    return new DecisionFilter().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DecisionFilter {
    return new DecisionFilter().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DecisionFilter {
    return new DecisionFilter().fromJsonString(jsonString, options)
  }

  static equals(
    a: DecisionFilter | PlainMessage<DecisionFilter> | undefined,
    b: DecisionFilter | PlainMessage<DecisionFilter> | undefined
  ): boolean {
    return proto3.util.equals(DecisionFilter, a, b)
  }
}

/**
 * Filters event by a particular key/value tag associated when them.
 * Will filter for either events which match the tag, or do not match the tag,
 * based on the 'comparison' value.
 *
 * @generated from message commonfate.control.log.v1alpha1.TagFilter
 */
export class TagFilter extends Message<TagFilter> {
  /**
   * @generated from field: string key = 1;
   */
  key = ''

  /**
   * @generated from field: string value = 2;
   */
  value = ''

  /**
   * @generated from field: commonfate.control.log.v1alpha1.BoolComparison comparison = 3;
   */
  comparison = BoolComparison.BOOL_COMPARISON_UNSPECIFIED

  constructor(data?: PartialMessage<TagFilter>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.log.v1alpha1.TagFilter'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'value', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'comparison',
      kind: 'enum',
      T: proto3.getEnumType(BoolComparison)
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TagFilter {
    return new TagFilter().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TagFilter {
    return new TagFilter().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TagFilter {
    return new TagFilter().fromJsonString(jsonString, options)
  }

  static equals(
    a: TagFilter | PlainMessage<TagFilter> | undefined,
    b: TagFilter | PlainMessage<TagFilter> | undefined
  ): boolean {
    return proto3.util.equals(TagFilter, a, b)
  }
}

/**
 * Filters events where the principal/action/resource matches particular entities.
 *
 * @generated from message commonfate.control.log.v1alpha1.EntityFilter
 */
export class EntityFilter extends Message<EntityFilter> {
  /**
   * IDs of entities to filter for. Will filter for a principal/action/resource matching any of these entities.
   *
   * @generated from field: repeated commonfate.entity.v1alpha1.EID ids = 1;
   */
  ids: EID[] = []

  constructor(data?: PartialMessage<EntityFilter>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.log.v1alpha1.EntityFilter'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'ids', kind: 'message', T: EID, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): EntityFilter {
    return new EntityFilter().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): EntityFilter {
    return new EntityFilter().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): EntityFilter {
    return new EntityFilter().fromJsonString(jsonString, options)
  }

  static equals(
    a: EntityFilter | PlainMessage<EntityFilter> | undefined,
    b: EntityFilter | PlainMessage<EntityFilter> | undefined
  ): boolean {
    return proto3.util.equals(EntityFilter, a, b)
  }
}

/**
 * Filters events based on when they occurred.
 *
 * @generated from message commonfate.control.log.v1alpha1.OccurredAtFilter
 */
export class OccurredAtFilter extends Message<OccurredAtFilter> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp

  /**
   * @generated from field: commonfate.control.log.v1alpha1.TimeComparison comparison = 2;
   */
  comparison = TimeComparison.UNSPECIFIED

  constructor(data?: PartialMessage<OccurredAtFilter>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.log.v1alpha1.OccurredAtFilter'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'time', kind: 'message', T: Timestamp },
    {
      no: 2,
      name: 'comparison',
      kind: 'enum',
      T: proto3.getEnumType(TimeComparison)
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): OccurredAtFilter {
    return new OccurredAtFilter().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): OccurredAtFilter {
    return new OccurredAtFilter().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): OccurredAtFilter {
    return new OccurredAtFilter().fromJsonString(jsonString, options)
  }

  static equals(
    a: OccurredAtFilter | PlainMessage<OccurredAtFilter> | undefined,
    b: OccurredAtFilter | PlainMessage<OccurredAtFilter> | undefined
  ): boolean {
    return proto3.util.equals(OccurredAtFilter, a, b)
  }
}

/**
 * @generated from message commonfate.control.log.v1alpha1.Filter
 */
export class Filter extends Message<Filter> {
  /**
   * @generated from oneof commonfate.control.log.v1alpha1.Filter.filter
   */
  filter:
    | {
        /**
         * @generated from field: commonfate.control.log.v1alpha1.TagFilter tag = 1;
         */
        value: TagFilter
        case: 'tag'
      }
    | {
        /**
         * @generated from field: commonfate.control.log.v1alpha1.OccurredAtFilter occurred_at = 2;
         */
        value: OccurredAtFilter
        case: 'occurredAt'
      }
    | {
        /**
         * @generated from field: commonfate.control.log.v1alpha1.EntityFilter principal = 3;
         */
        value: EntityFilter
        case: 'principal'
      }
    | {
        /**
         * @generated from field: commonfate.control.log.v1alpha1.EntityFilter action = 4;
         */
        value: EntityFilter
        case: 'action'
      }
    | {
        /**
         * @generated from field: commonfate.control.log.v1alpha1.EntityFilter resource = 5;
         */
        value: EntityFilter
        case: 'resource'
      }
    | {
        /**
         * @generated from field: commonfate.control.log.v1alpha1.DecisionFilter decision = 6;
         */
        value: DecisionFilter
        case: 'decision'
      }
    | { case: undefined; value?: undefined } = { case: undefined }

  constructor(data?: PartialMessage<Filter>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.log.v1alpha1.Filter'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'tag', kind: 'message', T: TagFilter, oneof: 'filter' },
    {
      no: 2,
      name: 'occurred_at',
      kind: 'message',
      T: OccurredAtFilter,
      oneof: 'filter'
    },
    {
      no: 3,
      name: 'principal',
      kind: 'message',
      T: EntityFilter,
      oneof: 'filter'
    },
    {
      no: 4,
      name: 'action',
      kind: 'message',
      T: EntityFilter,
      oneof: 'filter'
    },
    {
      no: 5,
      name: 'resource',
      kind: 'message',
      T: EntityFilter,
      oneof: 'filter'
    },
    {
      no: 6,
      name: 'decision',
      kind: 'message',
      T: DecisionFilter,
      oneof: 'filter'
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Filter {
    return new Filter().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Filter {
    return new Filter().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Filter {
    return new Filter().fromJsonString(jsonString, options)
  }

  static equals(
    a: Filter | PlainMessage<Filter> | undefined,
    b: Filter | PlainMessage<Filter> | undefined
  ): boolean {
    return proto3.util.equals(Filter, a, b)
  }
}

/**
 * @generated from message commonfate.control.log.v1alpha1.QueryEvaluationsResponse
 */
export class QueryEvaluationsResponse extends Message<QueryEvaluationsResponse> {
  /**
   * @generated from field: repeated commonfate.authz.v1alpha1.Evaluation evaluations = 1;
   */
  evaluations: Evaluation[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<QueryEvaluationsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.log.v1alpha1.QueryEvaluationsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'evaluations',
      kind: 'message',
      T: Evaluation,
      repeated: true
    },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryEvaluationsResponse {
    return new QueryEvaluationsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryEvaluationsResponse {
    return new QueryEvaluationsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryEvaluationsResponse {
    return new QueryEvaluationsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryEvaluationsResponse
      | PlainMessage<QueryEvaluationsResponse>
      | undefined,
    b:
      | QueryEvaluationsResponse
      | PlainMessage<QueryEvaluationsResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryEvaluationsResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.log.v1alpha1.GetEvaluationRequest
 */
export class GetEvaluationRequest extends Message<GetEvaluationRequest> {
  /**
   * The authorization evaluation ID.
   *
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<GetEvaluationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.log.v1alpha1.GetEvaluationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetEvaluationRequest {
    return new GetEvaluationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetEvaluationRequest {
    return new GetEvaluationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetEvaluationRequest {
    return new GetEvaluationRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetEvaluationRequest | PlainMessage<GetEvaluationRequest> | undefined,
    b: GetEvaluationRequest | PlainMessage<GetEvaluationRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetEvaluationRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.log.v1alpha1.GetEvaluationResponse
 */
export class GetEvaluationResponse extends Message<GetEvaluationResponse> {
  /**
   * @generated from field: commonfate.authz.v1alpha1.Evaluation evaluation = 1;
   */
  evaluation?: Evaluation

  constructor(data?: PartialMessage<GetEvaluationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.log.v1alpha1.GetEvaluationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'evaluation', kind: 'message', T: Evaluation }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetEvaluationResponse {
    return new GetEvaluationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetEvaluationResponse {
    return new GetEvaluationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetEvaluationResponse {
    return new GetEvaluationResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetEvaluationResponse | PlainMessage<GetEvaluationResponse> | undefined,
    b: GetEvaluationResponse | PlainMessage<GetEvaluationResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetEvaluationResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.log.v1alpha1.DebugEvaluationRequest
 */
export class DebugEvaluationRequest extends Message<DebugEvaluationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<DebugEvaluationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.log.v1alpha1.DebugEvaluationRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DebugEvaluationRequest {
    return new DebugEvaluationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DebugEvaluationRequest {
    return new DebugEvaluationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DebugEvaluationRequest {
    return new DebugEvaluationRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DebugEvaluationRequest
      | PlainMessage<DebugEvaluationRequest>
      | undefined,
    b: DebugEvaluationRequest | PlainMessage<DebugEvaluationRequest> | undefined
  ): boolean {
    return proto3.util.equals(DebugEvaluationRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.log.v1alpha1.DebugEvaluationResponse
 */
export class DebugEvaluationResponse extends Message<DebugEvaluationResponse> {
  /**
   * @generated from field: commonfate.authz.v1alpha1.DebugEvaluation debug_evaluation = 1;
   */
  debugEvaluation?: DebugEvaluation

  constructor(data?: PartialMessage<DebugEvaluationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.log.v1alpha1.DebugEvaluationResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'debug_evaluation', kind: 'message', T: DebugEvaluation }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DebugEvaluationResponse {
    return new DebugEvaluationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DebugEvaluationResponse {
    return new DebugEvaluationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DebugEvaluationResponse {
    return new DebugEvaluationResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DebugEvaluationResponse
      | PlainMessage<DebugEvaluationResponse>
      | undefined,
    b:
      | DebugEvaluationResponse
      | PlainMessage<DebugEvaluationResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(DebugEvaluationResponse, a, b)
  }
}
