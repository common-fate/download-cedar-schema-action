// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/control/feature/v1alpha1/feature.proto (package commonfate.control.feature.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * @generated from message commonfate.control.feature.v1alpha1.GetFeaturesRequest
 */
export class GetFeaturesRequest extends Message<GetFeaturesRequest> {
  constructor(data?: PartialMessage<GetFeaturesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.feature.v1alpha1.GetFeaturesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetFeaturesRequest {
    return new GetFeaturesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetFeaturesRequest {
    return new GetFeaturesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetFeaturesRequest {
    return new GetFeaturesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetFeaturesRequest | PlainMessage<GetFeaturesRequest> | undefined,
    b: GetFeaturesRequest | PlainMessage<GetFeaturesRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetFeaturesRequest, a, b)
  }
}

/**
 * @generated from message commonfate.control.feature.v1alpha1.GetFeaturesResponse
 */
export class GetFeaturesResponse extends Message<GetFeaturesResponse> {
  /**
   * @generated from field: repeated commonfate.control.feature.v1alpha1.Feature features = 1;
   */
  features: Feature[] = []

  constructor(data?: PartialMessage<GetFeaturesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.control.feature.v1alpha1.GetFeaturesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'features', kind: 'message', T: Feature, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetFeaturesResponse {
    return new GetFeaturesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetFeaturesResponse {
    return new GetFeaturesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetFeaturesResponse {
    return new GetFeaturesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetFeaturesResponse | PlainMessage<GetFeaturesResponse> | undefined,
    b: GetFeaturesResponse | PlainMessage<GetFeaturesResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetFeaturesResponse, a, b)
  }
}

/**
 * @generated from message commonfate.control.feature.v1alpha1.Feature
 */
export class Feature extends Message<Feature> {
  /**
   * Name of the feature. By convention this is 'snake_case',
   * for example: "least_privilege_analytics"
   *
   * @generated from field: string name = 1;
   */
  name = ''

  /**
   * @generated from field: bool enabled = 2;
   */
  enabled = false

  constructor(data?: PartialMessage<Feature>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.control.feature.v1alpha1.Feature'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'enabled', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Feature {
    return new Feature().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Feature {
    return new Feature().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Feature {
    return new Feature().fromJsonString(jsonString, options)
  }

  static equals(
    a: Feature | PlainMessage<Feature> | undefined,
    b: Feature | PlainMessage<Feature> | undefined
  ): boolean {
    return proto3.util.equals(Feature, a, b)
  }
}
