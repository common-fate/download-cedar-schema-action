// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/authz/v1alpha1/schema.proto (package commonfate.authz.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * @generated from message commonfate.authz.v1alpha1.GetSchemaJSONStringRequest
 */
export class GetSchemaJSONStringRequest extends Message<GetSchemaJSONStringRequest> {
  constructor(data?: PartialMessage<GetSchemaJSONStringRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.authz.v1alpha1.GetSchemaJSONStringRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSchemaJSONStringRequest {
    return new GetSchemaJSONStringRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSchemaJSONStringRequest {
    return new GetSchemaJSONStringRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSchemaJSONStringRequest {
    return new GetSchemaJSONStringRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetSchemaJSONStringRequest
      | PlainMessage<GetSchemaJSONStringRequest>
      | undefined,
    b:
      | GetSchemaJSONStringRequest
      | PlainMessage<GetSchemaJSONStringRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(GetSchemaJSONStringRequest, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.GetSchemaJSONStringResponse
 */
export class GetSchemaJSONStringResponse extends Message<GetSchemaJSONStringResponse> {
  /**
   * @generated from field: string schema = 1;
   */
  schema = ''

  constructor(data?: PartialMessage<GetSchemaJSONStringResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.authz.v1alpha1.GetSchemaJSONStringResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'schema', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetSchemaJSONStringResponse {
    return new GetSchemaJSONStringResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetSchemaJSONStringResponse {
    return new GetSchemaJSONStringResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetSchemaJSONStringResponse {
    return new GetSchemaJSONStringResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetSchemaJSONStringResponse
      | PlainMessage<GetSchemaJSONStringResponse>
      | undefined,
    b:
      | GetSchemaJSONStringResponse
      | PlainMessage<GetSchemaJSONStringResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetSchemaJSONStringResponse, a, b)
  }
}
