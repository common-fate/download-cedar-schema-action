// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/authz/v1alpha1/authz.proto (package commonfate.authz.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { Request } from './request_pb.js'
import { Evaluation } from './evaluation_pb.js'

/**
 * @generated from message commonfate.authz.v1alpha1.BatchAuthorizeRequest
 */
export class BatchAuthorizeRequest extends Message<BatchAuthorizeRequest> {
  /**
   * @generated from field: repeated commonfate.authz.v1alpha1.Request requests = 3;
   */
  requests: Request[] = []

  constructor(data?: PartialMessage<BatchAuthorizeRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.BatchAuthorizeRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: 'requests', kind: 'message', T: Request, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BatchAuthorizeRequest {
    return new BatchAuthorizeRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BatchAuthorizeRequest {
    return new BatchAuthorizeRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BatchAuthorizeRequest {
    return new BatchAuthorizeRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: BatchAuthorizeRequest | PlainMessage<BatchAuthorizeRequest> | undefined,
    b: BatchAuthorizeRequest | PlainMessage<BatchAuthorizeRequest> | undefined
  ): boolean {
    return proto3.util.equals(BatchAuthorizeRequest, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.BatchAuthorizeResponse
 */
export class BatchAuthorizeResponse extends Message<BatchAuthorizeResponse> {
  /**
   * @generated from field: repeated commonfate.authz.v1alpha1.Evaluation evaluations = 1;
   */
  evaluations: Evaluation[] = []

  constructor(data?: PartialMessage<BatchAuthorizeResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.BatchAuthorizeResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'evaluations',
      kind: 'message',
      T: Evaluation,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BatchAuthorizeResponse {
    return new BatchAuthorizeResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BatchAuthorizeResponse {
    return new BatchAuthorizeResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BatchAuthorizeResponse {
    return new BatchAuthorizeResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | BatchAuthorizeResponse
      | PlainMessage<BatchAuthorizeResponse>
      | undefined,
    b: BatchAuthorizeResponse | PlainMessage<BatchAuthorizeResponse> | undefined
  ): boolean {
    return proto3.util.equals(BatchAuthorizeResponse, a, b)
  }
}
