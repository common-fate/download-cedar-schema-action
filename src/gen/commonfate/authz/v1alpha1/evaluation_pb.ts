// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/authz/v1alpha1/evaluation.proto (package commonfate.authz.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Duration, Message, proto3, Timestamp } from '@bufbuild/protobuf'
import { Request } from './request_pb.js'
import { PolicySet } from './policy_pb.js'
import { Entity } from '../../entity/v1alpha1/entity_pb.js'

/**
 * @generated from enum commonfate.authz.v1alpha1.Decision
 */
export enum Decision {
  /**
   * @generated from enum value: DECISION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Access is allowed.
   *
   * @generated from enum value: DECISION_ALLOW = 2;
   */
  ALLOW = 2,

  /**
   * Access is denied.
   *
   * @generated from enum value: DECISION_DENY = 4;
   */
  DENY = 4
}
// Retrieve enum metadata with: proto3.getEnumType(Decision)
proto3.util.setEnumType(Decision, 'commonfate.authz.v1alpha1.Decision', [
  { no: 0, name: 'DECISION_UNSPECIFIED' },
  { no: 2, name: 'DECISION_ALLOW' },
  { no: 4, name: 'DECISION_DENY' }
])

/**
 * DebugEvaluation contains additional information about a particular
 * authorization evaluation, allowing an administrator to debug the decision
 * and understand why the request was allowed or denied.
 *
 * @generated from message commonfate.authz.v1alpha1.DebugEvaluation
 */
export class DebugEvaluation extends Message<DebugEvaluation> {
  /**
   * version is used when serializing the DebugEvaluation message in order to ensure
   * forwards-compatibility. Version should be set to '1' when storing DebugEvaluation messages in archival storage.
   *
   * @generated from field: uint32 version = 1;
   */
  version = 0

  /**
   * @generated from field: commonfate.authz.v1alpha1.Evaluation evaluation = 2;
   */
  evaluation?: Evaluation

  /**
   * @generated from field: commonfate.authz.v1alpha1.DebugInformation debug_information = 3;
   */
  debugInformation?: DebugInformation

  constructor(data?: PartialMessage<DebugEvaluation>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.DebugEvaluation'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'version', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: 'evaluation', kind: 'message', T: Evaluation },
    { no: 3, name: 'debug_information', kind: 'message', T: DebugInformation }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DebugEvaluation {
    return new DebugEvaluation().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DebugEvaluation {
    return new DebugEvaluation().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DebugEvaluation {
    return new DebugEvaluation().fromJsonString(jsonString, options)
  }

  static equals(
    a: DebugEvaluation | PlainMessage<DebugEvaluation> | undefined,
    b: DebugEvaluation | PlainMessage<DebugEvaluation> | undefined
  ): boolean {
    return proto3.util.equals(DebugEvaluation, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.Evaluation
 */
export class Evaluation extends Message<Evaluation> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: commonfate.authz.v1alpha1.Request request = 2;
   */
  request?: Request

  /**
   * @generated from field: commonfate.authz.v1alpha1.Decision decision = 3;
   */
  decision = Decision.UNSPECIFIED

  /**
   * @generated from field: commonfate.authz.v1alpha1.Diagnostics diagnostics = 4;
   */
  diagnostics?: Diagnostics

  /**
   * The client-side identifier for the request specified in AuthorizationRequest.
   *
   * @generated from field: string client_key = 5;
   */
  clientKey = ''

  /**
   * @generated from field: google.protobuf.Timestamp evaluated_at = 6;
   */
  evaluatedAt?: Timestamp

  /**
   * the duration that it took to make the authorization decision
   *
   * @generated from field: google.protobuf.Duration evaluation_duration = 7;
   */
  evaluationDuration?: Duration

  constructor(data?: PartialMessage<Evaluation>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.Evaluation'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'request', kind: 'message', T: Request },
    { no: 3, name: 'decision', kind: 'enum', T: proto3.getEnumType(Decision) },
    { no: 4, name: 'diagnostics', kind: 'message', T: Diagnostics },
    { no: 5, name: 'client_key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'evaluated_at', kind: 'message', T: Timestamp },
    { no: 7, name: 'evaluation_duration', kind: 'message', T: Duration }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Evaluation {
    return new Evaluation().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Evaluation {
    return new Evaluation().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Evaluation {
    return new Evaluation().fromJsonString(jsonString, options)
  }

  static equals(
    a: Evaluation | PlainMessage<Evaluation> | undefined,
    b: Evaluation | PlainMessage<Evaluation> | undefined
  ): boolean {
    return proto3.util.equals(Evaluation, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.Diagnostics
 */
export class Diagnostics extends Message<Diagnostics> {
  /**
   * @generated from field: repeated string reason = 1;
   */
  reason: string[] = []

  /**
   * @generated from field: repeated string errors = 2;
   */
  errors: string[] = []

  /**
   * @generated from field: repeated commonfate.authz.v1alpha1.Annotation annotations = 3;
   */
  annotations: Annotation[] = []

  constructor(data?: PartialMessage<Diagnostics>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.Diagnostics'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'reason',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true
    },
    {
      no: 2,
      name: 'errors',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true
    },
    {
      no: 3,
      name: 'annotations',
      kind: 'message',
      T: Annotation,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Diagnostics {
    return new Diagnostics().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Diagnostics {
    return new Diagnostics().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Diagnostics {
    return new Diagnostics().fromJsonString(jsonString, options)
  }

  static equals(
    a: Diagnostics | PlainMessage<Diagnostics> | undefined,
    b: Diagnostics | PlainMessage<Diagnostics> | undefined
  ): boolean {
    return proto3.util.equals(Diagnostics, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.Annotation
 */
export class Annotation extends Message<Annotation> {
  /**
   * the ID of the policy with the annotation
   *
   * @generated from field: string policy_id = 1;
   */
  policyId = ''

  /**
   * the key of the annotation. e.g. in @advice("something")
   * it is 'advice'.
   *
   * @generated from field: string key = 2;
   */
  key = ''

  /**
   * the value of the annotation. e.g. in @advice("something")
   * it is 'something'
   *
   * @generated from field: string value = 3;
   */
  value = ''

  constructor(data?: PartialMessage<Annotation>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.Annotation'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'policy_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'value', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Annotation {
    return new Annotation().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Annotation {
    return new Annotation().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Annotation {
    return new Annotation().fromJsonString(jsonString, options)
  }

  static equals(
    a: Annotation | PlainMessage<Annotation> | undefined,
    b: Annotation | PlainMessage<Annotation> | undefined
  ): boolean {
    return proto3.util.equals(Annotation, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.DebugInformation
 */
export class DebugInformation extends Message<DebugInformation> {
  /**
   * PolicySets which contributed to the authorization decision.
   *
   * @generated from field: repeated commonfate.authz.v1alpha1.PolicySet policy_sets = 1;
   */
  policySets: PolicySet[] = []

  /**
   * Entities which contributed to the authorization decision.
   *
   * @generated from field: repeated commonfate.entity.v1alpha1.Entity entities = 2;
   */
  entities: Entity[] = []

  constructor(data?: PartialMessage<DebugInformation>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.DebugInformation'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'policy_sets',
      kind: 'message',
      T: PolicySet,
      repeated: true
    },
    { no: 2, name: 'entities', kind: 'message', T: Entity, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DebugInformation {
    return new DebugInformation().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DebugInformation {
    return new DebugInformation().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DebugInformation {
    return new DebugInformation().fromJsonString(jsonString, options)
  }

  static equals(
    a: DebugInformation | PlainMessage<DebugInformation> | undefined,
    b: DebugInformation | PlainMessage<DebugInformation> | undefined
  ): boolean {
    return proto3.util.equals(DebugInformation, a, b)
  }
}
