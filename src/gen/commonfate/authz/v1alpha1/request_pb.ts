// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/authz/v1alpha1/request.proto (package commonfate.authz.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { EID } from '../../entity/v1alpha1/eid_pb.js'
import { Entity } from '../../entity/v1alpha1/entity_pb.js'
import { ChildRelation } from '../../entity/v1alpha1/child_relation_pb.js'

/**
 * @generated from message commonfate.authz.v1alpha1.Request
 */
export class Request extends Message<Request> {
  /**
   * @generated from field: commonfate.entity.v1alpha1.EID principal = 1;
   */
  principal?: EID

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID action = 2;
   */
  action?: EID

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID resource = 3;
   */
  resource?: EID

  /**
   * A client side identifier for the authorization request.
   * The client_key will be included in the corresponding evaluation for the
   * particular request made.
   *
   * Useful when calling BatchAuthorize to match the evaluations with the requests.
   *
   * @generated from field: string client_key = 4;
   */
  clientKey = ''

  /**
   * Entities to 'overlay' temporarily on the entities stored in the authz service.
   *
   * @generated from field: repeated commonfate.entity.v1alpha1.Entity overlay_entities = 5;
   */
  overlayEntities: Entity[] = []

  /**
   * Parent/child relationships to 'overlay' temporarily on the entities stored in the authz service.
   *
   * @generated from field: repeated commonfate.entity.v1alpha1.ChildRelation overlay_children = 6;
   */
  overlayChildren: ChildRelation[] = []

  /**
   * Tags associated with the authorization evaluation.
   * Common Fate uses this to add attributes like the Access Request ID
   * to the evaluation.
   *
   * Tags are *not* used to make authorization decisions but rather is used to aid in observability
   * and debugging of authorization decisions.
   *
   * @generated from field: repeated commonfate.authz.v1alpha1.Tag tags = 8;
   */
  tags: Tag[] = []

  constructor(data?: PartialMessage<Request>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.Request'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'principal', kind: 'message', T: EID },
    { no: 2, name: 'action', kind: 'message', T: EID },
    { no: 3, name: 'resource', kind: 'message', T: EID },
    { no: 4, name: 'client_key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 5,
      name: 'overlay_entities',
      kind: 'message',
      T: Entity,
      repeated: true
    },
    {
      no: 6,
      name: 'overlay_children',
      kind: 'message',
      T: ChildRelation,
      repeated: true
    },
    { no: 8, name: 'tags', kind: 'message', T: Tag, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Request {
    return new Request().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Request {
    return new Request().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Request {
    return new Request().fromJsonString(jsonString, options)
  }

  static equals(
    a: Request | PlainMessage<Request> | undefined,
    b: Request | PlainMessage<Request> | undefined
  ): boolean {
    return proto3.util.equals(Request, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.Tag
 */
export class Tag extends Message<Tag> {
  /**
   * @generated from field: string key = 1;
   */
  key = ''

  /**
   * @generated from field: string value = 2;
   */
  value = ''

  constructor(data?: PartialMessage<Tag>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.Tag'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'value', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Tag {
    return new Tag().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Tag {
    return new Tag().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Tag {
    return new Tag().fromJsonString(jsonString, options)
  }

  static equals(
    a: Tag | PlainMessage<Tag> | undefined,
    b: Tag | PlainMessage<Tag> | undefined
  ): boolean {
    return proto3.util.equals(Tag, a, b)
  }
}
