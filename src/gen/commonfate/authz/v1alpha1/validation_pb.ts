// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/authz/v1alpha1/validation.proto (package commonfate.authz.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * @generated from enum commonfate.authz.v1alpha1.ValidationErrorKind
 */
export enum ValidationErrorKind {
  /**
   * @generated from enum value: VALIDATION_ERROR_KIND_UNSPECIFIED = 0;
   */
  VALIDATION_ERROR_KIND_UNSPECIFIED = 0,

  /**
   * A policy contains an entity type that is not declared in the schema.
   *
   * @generated from enum value: VALIDATION_ERROR_UNRECOGNIZED_ENTITY_TYPE = 1;
   */
  VALIDATION_ERROR_UNRECOGNIZED_ENTITY_TYPE = 1,

  /**
   * A policy contains an action that is not declared in the schema.
   *
   * @generated from enum value: VALIDATION_ERROR_UNRECOGNIZED_ACTION_ID = 2;
   */
  VALIDATION_ERROR_UNRECOGNIZED_ACTION_ID = 2,

  /**
   * There is no action satisfying the action head constraint that can be
   * applied to a principal and resources that both satisfy their respective
   * head conditions.
   *
   * @generated from enum value: VALIDATION_ERROR_INVALID_ACTION_APPLICATION = 3;
   */
  VALIDATION_ERROR_INVALID_ACTION_APPLICATION = 3,

  /**
   * The type checker found an error.
   *
   * @generated from enum value: VALIDATION_ERROR_TYPE_ERROR = 4;
   */
  VALIDATION_ERROR_TYPE_ERROR = 4,

  /**
   * An unspecified entity was used in a policy.
   *
   * @generated from enum value: VALIDATION_ERROR_UNSPECIFIED_ENTITY = 5;
   */
  VALIDATION_ERROR_UNSPECIFIED_ENTITY = 5
}
// Retrieve enum metadata with: proto3.getEnumType(ValidationErrorKind)
proto3.util.setEnumType(
  ValidationErrorKind,
  'commonfate.authz.v1alpha1.ValidationErrorKind',
  [
    { no: 0, name: 'VALIDATION_ERROR_KIND_UNSPECIFIED' },
    { no: 1, name: 'VALIDATION_ERROR_UNRECOGNIZED_ENTITY_TYPE' },
    { no: 2, name: 'VALIDATION_ERROR_UNRECOGNIZED_ACTION_ID' },
    { no: 3, name: 'VALIDATION_ERROR_INVALID_ACTION_APPLICATION' },
    { no: 4, name: 'VALIDATION_ERROR_TYPE_ERROR' },
    { no: 5, name: 'VALIDATION_ERROR_UNSPECIFIED_ENTITY' }
  ]
)

/**
 * @generated from enum commonfate.authz.v1alpha1.ValidationWarningKind
 */
export enum ValidationWarningKind {
  /**
   * @generated from enum value: VALIDATION_WARNING_KIND_UNSPECIFIED = 0;
   */
  VALIDATION_WARNING_KIND_UNSPECIFIED = 0,

  /**
   * A string contains mixed scripts. Different scripts can contain visually similar characters which may be confused for each other.
   *
   * @generated from enum value: VALIDATION_WARNING_MIXED_SCRIPT_STRING = 1;
   */
  VALIDATION_WARNING_MIXED_SCRIPT_STRING = 1,

  /**
   * A string contains BIDI control characters. These can be used to create crafted pieces of code that obfuscate true control flow.
   *
   * @generated from enum value: VALIDATION_WARNING_BIDI_CHARS_IN_STRING = 2;
   */
  VALIDATION_WARNING_BIDI_CHARS_IN_STRING = 2,

  /**
   * An id contains BIDI control characters. These can be used to create crafted pieces of code that obfuscate true control flow.
   *
   * @generated from enum value: VALIDATION_WARNING_BIDI_CHARS_IN_IDENTIFIER = 3;
   */
  VALIDATION_WARNING_BIDI_CHARS_IN_IDENTIFIER = 3,

  /**
   * An id contains mixed scripts. This can cause characters to be confused for each other.
   *
   * @generated from enum value: VALIDATION_WARNING_MIXED_SCRIPT_IDENTIFIER = 4;
   */
  VALIDATION_WARNING_MIXED_SCRIPT_IDENTIFIER = 4,

  /**
   * An id contains characters that fall outside of the General Security Profile for Identifiers. We recommend adhering to this if possible. See UnicodeÂ® Technical Standard #39 for more info.
   *
   * @generated from enum value: VALIDATION_WARNING_CONFUSABLE_IDENTIFIER = 5;
   */
  VALIDATION_WARNING_CONFUSABLE_IDENTIFIER = 5,

  /**
   * An entity referenced in a policy does not exist.
   *
   * @generated from enum value: VALIDATION_WARNING_ENTITY_DOES_NOT_EXIST = 6;
   */
  VALIDATION_WARNING_ENTITY_DOES_NOT_EXIST = 6
}
// Retrieve enum metadata with: proto3.getEnumType(ValidationWarningKind)
proto3.util.setEnumType(
  ValidationWarningKind,
  'commonfate.authz.v1alpha1.ValidationWarningKind',
  [
    { no: 0, name: 'VALIDATION_WARNING_KIND_UNSPECIFIED' },
    { no: 1, name: 'VALIDATION_WARNING_MIXED_SCRIPT_STRING' },
    { no: 2, name: 'VALIDATION_WARNING_BIDI_CHARS_IN_STRING' },
    { no: 3, name: 'VALIDATION_WARNING_BIDI_CHARS_IN_IDENTIFIER' },
    { no: 4, name: 'VALIDATION_WARNING_MIXED_SCRIPT_IDENTIFIER' },
    { no: 5, name: 'VALIDATION_WARNING_CONFUSABLE_IDENTIFIER' },
    { no: 6, name: 'VALIDATION_WARNING_ENTITY_DOES_NOT_EXIST' }
  ]
)

/**
 * @generated from message commonfate.authz.v1alpha1.ValidatePolicySetTextRequest
 */
export class ValidatePolicySetTextRequest extends Message<ValidatePolicySetTextRequest> {
  /**
   * @generated from field: string policy_set_text = 1;
   */
  policySetText = ''

  constructor(data?: PartialMessage<ValidatePolicySetTextRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.authz.v1alpha1.ValidatePolicySetTextRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'policy_set_text',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ValidatePolicySetTextRequest {
    return new ValidatePolicySetTextRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ValidatePolicySetTextRequest {
    return new ValidatePolicySetTextRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ValidatePolicySetTextRequest {
    return new ValidatePolicySetTextRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | ValidatePolicySetTextRequest
      | PlainMessage<ValidatePolicySetTextRequest>
      | undefined,
    b:
      | ValidatePolicySetTextRequest
      | PlainMessage<ValidatePolicySetTextRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(ValidatePolicySetTextRequest, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.ValidatePolicySetTextResponse
 */
export class ValidatePolicySetTextResponse extends Message<ValidatePolicySetTextResponse> {
  /**
   * @generated from field: commonfate.authz.v1alpha1.ValidationResult result = 1;
   */
  result?: ValidationResult

  constructor(data?: PartialMessage<ValidatePolicySetTextResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.authz.v1alpha1.ValidatePolicySetTextResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: ValidationResult }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ValidatePolicySetTextResponse {
    return new ValidatePolicySetTextResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ValidatePolicySetTextResponse {
    return new ValidatePolicySetTextResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ValidatePolicySetTextResponse {
    return new ValidatePolicySetTextResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | ValidatePolicySetTextResponse
      | PlainMessage<ValidatePolicySetTextResponse>
      | undefined,
    b:
      | ValidatePolicySetTextResponse
      | PlainMessage<ValidatePolicySetTextResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(ValidatePolicySetTextResponse, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.ValidationResult
 */
export class ValidationResult extends Message<ValidationResult> {
  /**
   * @generated from field: repeated commonfate.authz.v1alpha1.ValidationError errors = 1;
   */
  errors: ValidationError[] = []

  /**
   * @generated from field: repeated commonfate.authz.v1alpha1.ValidationWarning warnings = 2;
   */
  warnings: ValidationWarning[] = []

  constructor(data?: PartialMessage<ValidationResult>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.ValidationResult'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'errors',
      kind: 'message',
      T: ValidationError,
      repeated: true
    },
    {
      no: 2,
      name: 'warnings',
      kind: 'message',
      T: ValidationWarning,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ValidationResult {
    return new ValidationResult().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ValidationResult {
    return new ValidationResult().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ValidationResult {
    return new ValidationResult().fromJsonString(jsonString, options)
  }

  static equals(
    a: ValidationResult | PlainMessage<ValidationResult> | undefined,
    b: ValidationResult | PlainMessage<ValidationResult> | undefined
  ): boolean {
    return proto3.util.equals(ValidationResult, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.ValidationError
 */
export class ValidationError extends Message<ValidationError> {
  /**
   * @generated from field: string policy_id = 1;
   */
  policyId = ''

  /**
   * @generated from field: string message = 2;
   */
  message = ''

  constructor(data?: PartialMessage<ValidationError>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.ValidationError'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'policy_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'message', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ValidationError {
    return new ValidationError().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ValidationError {
    return new ValidationError().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ValidationError {
    return new ValidationError().fromJsonString(jsonString, options)
  }

  static equals(
    a: ValidationError | PlainMessage<ValidationError> | undefined,
    b: ValidationError | PlainMessage<ValidationError> | undefined
  ): boolean {
    return proto3.util.equals(ValidationError, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.ValidationWarning
 */
export class ValidationWarning extends Message<ValidationWarning> {
  /**
   * @generated from field: string policy_id = 1;
   */
  policyId = ''

  /**
   * @generated from field: string message = 2;
   */
  message = ''

  constructor(data?: PartialMessage<ValidationWarning>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.ValidationWarning'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'policy_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'message', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ValidationWarning {
    return new ValidationWarning().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ValidationWarning {
    return new ValidationWarning().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ValidationWarning {
    return new ValidationWarning().fromJsonString(jsonString, options)
  }

  static equals(
    a: ValidationWarning | PlainMessage<ValidationWarning> | undefined,
    b: ValidationWarning | PlainMessage<ValidationWarning> | undefined
  ): boolean {
    return proto3.util.equals(ValidationWarning, a, b)
  }
}

/**
 * The range in the policy definition which contains the error
 *
 * @generated from message commonfate.authz.v1alpha1.SourceRange
 */
export class SourceRange extends Message<SourceRange> {
  /**
   * @generated from field: uint32 start = 1;
   */
  start = 0

  /**
   * @generated from field: uint32 end = 2;
   */
  end = 0

  constructor(data?: PartialMessage<SourceRange>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.SourceRange'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'start', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: 'end', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SourceRange {
    return new SourceRange().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SourceRange {
    return new SourceRange().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SourceRange {
    return new SourceRange().fromJsonString(jsonString, options)
  }

  static equals(
    a: SourceRange | PlainMessage<SourceRange> | undefined,
    b: SourceRange | PlainMessage<SourceRange> | undefined
  ): boolean {
    return proto3.util.equals(SourceRange, a, b)
  }
}
