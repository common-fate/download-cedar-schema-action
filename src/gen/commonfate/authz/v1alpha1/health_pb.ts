// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/authz/v1alpha1/health.proto (package commonfate.authz.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * @generated from message commonfate.authz.v1alpha1.HealthCheckRequest
 */
export class HealthCheckRequest extends Message<HealthCheckRequest> {
  constructor(data?: PartialMessage<HealthCheckRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.HealthCheckRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): HealthCheckRequest {
    return new HealthCheckRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): HealthCheckRequest {
    return new HealthCheckRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): HealthCheckRequest {
    return new HealthCheckRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: HealthCheckRequest | PlainMessage<HealthCheckRequest> | undefined,
    b: HealthCheckRequest | PlainMessage<HealthCheckRequest> | undefined
  ): boolean {
    return proto3.util.equals(HealthCheckRequest, a, b)
  }
}

/**
 * @generated from message commonfate.authz.v1alpha1.HealthCheckResponse
 */
export class HealthCheckResponse extends Message<HealthCheckResponse> {
  constructor(data?: PartialMessage<HealthCheckResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.authz.v1alpha1.HealthCheckResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): HealthCheckResponse {
    return new HealthCheckResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): HealthCheckResponse {
    return new HealthCheckResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): HealthCheckResponse {
    return new HealthCheckResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: HealthCheckResponse | PlainMessage<HealthCheckResponse> | undefined,
    b: HealthCheckResponse | PlainMessage<HealthCheckResponse> | undefined
  ): boolean {
    return proto3.util.equals(HealthCheckResponse, a, b)
  }
}
