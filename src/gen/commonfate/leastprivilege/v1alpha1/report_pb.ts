// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/leastprivilege/v1alpha1/report.proto (package commonfate.leastprivilege.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3, Timestamp } from '@bufbuild/protobuf'

/**
 * @generated from message commonfate.leastprivilege.v1alpha1.Report
 */
export class Report extends Message<Report> {
  /**
   * @generated from field: repeated commonfate.leastprivilege.v1alpha1.UsageSummary usage_summaries = 1;
   */
  usageSummaries: UsageSummary[] = []

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp usage_cutoff_time = 4;
   */
  usageCutoffTime?: Timestamp

  constructor(data?: PartialMessage<Report>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.leastprivilege.v1alpha1.Report'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'usage_summaries',
      kind: 'message',
      T: UsageSummary,
      repeated: true
    },
    { no: 2, name: 'created_at', kind: 'message', T: Timestamp },
    { no: 3, name: 'timestamp', kind: 'message', T: Timestamp },
    { no: 4, name: 'usage_cutoff_time', kind: 'message', T: Timestamp }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Report {
    return new Report().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Report {
    return new Report().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Report {
    return new Report().fromJsonString(jsonString, options)
  }

  static equals(
    a: Report | PlainMessage<Report> | undefined,
    b: Report | PlainMessage<Report> | undefined
  ): boolean {
    return proto3.util.equals(Report, a, b)
  }
}

/**
 * @generated from message commonfate.leastprivilege.v1alpha1.UsageSummary
 */
export class UsageSummary extends Message<UsageSummary> {
  /**
   * @generated from field: string label = 2;
   */
  label = ''

  /**
   * @generated from field: int32 in_use_count = 3;
   */
  inUseCount = 0

  /**
   * @generated from field: int32 unused_count = 4;
   */
  unusedCount = 0

  /**
   * @generated from field: int32 indeterminate_count = 5;
   */
  indeterminateCount = 0

  constructor(data?: PartialMessage<UsageSummary>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.leastprivilege.v1alpha1.UsageSummary'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: 'label', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'in_use_count',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */
    },
    {
      no: 4,
      name: 'unused_count',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */
    },
    {
      no: 5,
      name: 'indeterminate_count',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UsageSummary {
    return new UsageSummary().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UsageSummary {
    return new UsageSummary().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UsageSummary {
    return new UsageSummary().fromJsonString(jsonString, options)
  }

  static equals(
    a: UsageSummary | PlainMessage<UsageSummary> | undefined,
    b: UsageSummary | PlainMessage<UsageSummary> | undefined
  ): boolean {
    return proto3.util.equals(UsageSummary, a, b)
  }
}
