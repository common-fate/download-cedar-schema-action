// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/leastprivilege/v1alpha1/leastprivilege.proto (package commonfate.leastprivilege.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { Report } from './report_pb.js'

/**
 * @generated from message commonfate.leastprivilege.v1alpha1.GetLatestReportRequest
 */
export class GetLatestReportRequest extends Message<GetLatestReportRequest> {
  constructor(data?: PartialMessage<GetLatestReportRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.leastprivilege.v1alpha1.GetLatestReportRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetLatestReportRequest {
    return new GetLatestReportRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetLatestReportRequest {
    return new GetLatestReportRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetLatestReportRequest {
    return new GetLatestReportRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetLatestReportRequest
      | PlainMessage<GetLatestReportRequest>
      | undefined,
    b: GetLatestReportRequest | PlainMessage<GetLatestReportRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetLatestReportRequest, a, b)
  }
}

/**
 * @generated from message commonfate.leastprivilege.v1alpha1.GetLatestReportResponse
 */
export class GetLatestReportResponse extends Message<GetLatestReportResponse> {
  /**
   * @generated from field: commonfate.leastprivilege.v1alpha1.Report report = 1;
   */
  report?: Report

  constructor(data?: PartialMessage<GetLatestReportResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.leastprivilege.v1alpha1.GetLatestReportResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'report', kind: 'message', T: Report }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetLatestReportResponse {
    return new GetLatestReportResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetLatestReportResponse {
    return new GetLatestReportResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetLatestReportResponse {
    return new GetLatestReportResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetLatestReportResponse
      | PlainMessage<GetLatestReportResponse>
      | undefined,
    b:
      | GetLatestReportResponse
      | PlainMessage<GetLatestReportResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetLatestReportResponse, a, b)
  }
}

/**
 * @generated from message commonfate.leastprivilege.v1alpha1.GetHistoricalReportsRequest
 */
export class GetHistoricalReportsRequest extends Message<GetHistoricalReportsRequest> {
  constructor(data?: PartialMessage<GetHistoricalReportsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.leastprivilege.v1alpha1.GetHistoricalReportsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetHistoricalReportsRequest {
    return new GetHistoricalReportsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetHistoricalReportsRequest {
    return new GetHistoricalReportsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetHistoricalReportsRequest {
    return new GetHistoricalReportsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetHistoricalReportsRequest
      | PlainMessage<GetHistoricalReportsRequest>
      | undefined,
    b:
      | GetHistoricalReportsRequest
      | PlainMessage<GetHistoricalReportsRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(GetHistoricalReportsRequest, a, b)
  }
}

/**
 * @generated from message commonfate.leastprivilege.v1alpha1.GetHistoricalReportsResponse
 */
export class GetHistoricalReportsResponse extends Message<GetHistoricalReportsResponse> {
  /**
   * @generated from field: repeated commonfate.leastprivilege.v1alpha1.Report reports = 1;
   */
  reports: Report[] = []

  constructor(data?: PartialMessage<GetHistoricalReportsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.leastprivilege.v1alpha1.GetHistoricalReportsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'reports', kind: 'message', T: Report, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetHistoricalReportsResponse {
    return new GetHistoricalReportsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetHistoricalReportsResponse {
    return new GetHistoricalReportsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetHistoricalReportsResponse {
    return new GetHistoricalReportsResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | GetHistoricalReportsResponse
      | PlainMessage<GetHistoricalReportsResponse>
      | undefined,
    b:
      | GetHistoricalReportsResponse
      | PlainMessage<GetHistoricalReportsResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetHistoricalReportsResponse, a, b)
  }
}

/**
 * @generated from message commonfate.leastprivilege.v1alpha1.DownloadEntitlementUsageReportRequest
 */
export class DownloadEntitlementUsageReportRequest extends Message<DownloadEntitlementUsageReportRequest> {
  constructor(data?: PartialMessage<DownloadEntitlementUsageReportRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.leastprivilege.v1alpha1.DownloadEntitlementUsageReportRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DownloadEntitlementUsageReportRequest {
    return new DownloadEntitlementUsageReportRequest().fromBinary(
      bytes,
      options
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DownloadEntitlementUsageReportRequest {
    return new DownloadEntitlementUsageReportRequest().fromJson(
      jsonValue,
      options
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DownloadEntitlementUsageReportRequest {
    return new DownloadEntitlementUsageReportRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | DownloadEntitlementUsageReportRequest
      | PlainMessage<DownloadEntitlementUsageReportRequest>
      | undefined,
    b:
      | DownloadEntitlementUsageReportRequest
      | PlainMessage<DownloadEntitlementUsageReportRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(DownloadEntitlementUsageReportRequest, a, b)
  }
}

/**
 * @generated from message commonfate.leastprivilege.v1alpha1.DownloadEntitlementUsageReportResponse
 */
export class DownloadEntitlementUsageReportResponse extends Message<DownloadEntitlementUsageReportResponse> {
  /**
   * @generated from field: string download_url = 1;
   */
  downloadUrl = ''

  constructor(data?: PartialMessage<DownloadEntitlementUsageReportResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.leastprivilege.v1alpha1.DownloadEntitlementUsageReportResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'download_url',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DownloadEntitlementUsageReportResponse {
    return new DownloadEntitlementUsageReportResponse().fromBinary(
      bytes,
      options
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DownloadEntitlementUsageReportResponse {
    return new DownloadEntitlementUsageReportResponse().fromJson(
      jsonValue,
      options
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DownloadEntitlementUsageReportResponse {
    return new DownloadEntitlementUsageReportResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | DownloadEntitlementUsageReportResponse
      | PlainMessage<DownloadEntitlementUsageReportResponse>
      | undefined,
    b:
      | DownloadEntitlementUsageReportResponse
      | PlainMessage<DownloadEntitlementUsageReportResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(DownloadEntitlementUsageReportResponse, a, b)
  }
}
