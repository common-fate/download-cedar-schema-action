// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/access/v1alpha1/audit_logs.proto (package commonfate.access.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3, Struct, Timestamp } from '@bufbuild/protobuf'
import { EID } from '../../entity/v1alpha1/eid_pb.js'
import { User } from './user_pb.js'
import { IdentityLink } from './identity_pb.js'

/**
 * @generated from message commonfate.access.v1alpha1.QueryAuditLogsRequest
 */
export class QueryAuditLogsRequest extends Message<QueryAuditLogsRequest> {
  /**
   * Query for audit logs relating to a particular target
   *
   * @generated from field: commonfate.entity.v1alpha1.EID target = 1;
   */
  target?: EID

  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 10;
   */
  pageToken = ''

  constructor(data?: PartialMessage<QueryAuditLogsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.QueryAuditLogsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'target', kind: 'message', T: EID },
    { no: 10, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryAuditLogsRequest {
    return new QueryAuditLogsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryAuditLogsRequest {
    return new QueryAuditLogsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryAuditLogsRequest {
    return new QueryAuditLogsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryAuditLogsRequest | PlainMessage<QueryAuditLogsRequest> | undefined,
    b: QueryAuditLogsRequest | PlainMessage<QueryAuditLogsRequest> | undefined
  ): boolean {
    return proto3.util.equals(QueryAuditLogsRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryAuditLogsResponse
 */
export class QueryAuditLogsResponse extends Message<QueryAuditLogsResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.AuditLog audit_logs = 1;
   */
  auditLogs: AuditLog[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<QueryAuditLogsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.QueryAuditLogsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'audit_logs', kind: 'message', T: AuditLog, repeated: true },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryAuditLogsResponse {
    return new QueryAuditLogsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryAuditLogsResponse {
    return new QueryAuditLogsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryAuditLogsResponse {
    return new QueryAuditLogsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAuditLogsResponse
      | PlainMessage<QueryAuditLogsResponse>
      | undefined,
    b: QueryAuditLogsResponse | PlainMessage<QueryAuditLogsResponse> | undefined
  ): boolean {
    return proto3.util.equals(QueryAuditLogsResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.AuditLogPreview
 */
export class AuditLogPreview extends Message<AuditLogPreview> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.AuditLog logs = 1;
   */
  logs: AuditLog[] = []

  /**
   * An approximate count of activity events
   *
   * @generated from field: uint32 log_count = 12;
   */
  logCount = 0

  constructor(data?: PartialMessage<AuditLogPreview>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.AuditLogPreview'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'logs', kind: 'message', T: AuditLog, repeated: true },
    { no: 12, name: 'log_count', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AuditLogPreview {
    return new AuditLogPreview().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AuditLogPreview {
    return new AuditLogPreview().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AuditLogPreview {
    return new AuditLogPreview().fromJsonString(jsonString, options)
  }

  static equals(
    a: AuditLogPreview | PlainMessage<AuditLogPreview> | undefined,
    b: AuditLogPreview | PlainMessage<AuditLogPreview> | undefined
  ): boolean {
    return proto3.util.equals(AuditLogPreview, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.AuditLog
 */
export class AuditLog extends Message<AuditLog> {
  /**
   * an ID of the audit log event
   *
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * the action which occurred
   *
   * @generated from field: string action = 2;
   */
  action = ''

  /**
   * the actor which performed the action.
   *
   * @generated from field: commonfate.access.v1alpha1.User actor = 3;
   */
  actor?: User

  /**
   * the timestamp the action occurred at.
   *
   * @generated from field: google.protobuf.Timestamp occurred_at = 4;
   */
  occurredAt?: Timestamp

  /**
   * all related resources affected by the action.
   *
   * @generated from field: repeated commonfate.entity.v1alpha1.EID targets = 5;
   */
  targets: EID[] = []

  /**
   * a human-friendly message describing the action.
   *
   * @generated from field: string message = 6;
   */
  message = ''

  /**
   * additional context (omitted in user-facing audit logs,
   * as it contains sensitive information like IP addresses)
   *
   * @generated from field: google.protobuf.Struct context = 7;
   */
  context?: Struct

  /**
   * the caller identity details, including information
   * such as the particular authentication token ID used
   * to perform the action.
   *
   * @generated from field: repeated commonfate.access.v1alpha1.IdentityLink caller_identity_chain = 8;
   */
  callerIdentityChain: IdentityLink[] = []

  constructor(data?: PartialMessage<AuditLog>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.AuditLog'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'action', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'actor', kind: 'message', T: User },
    { no: 4, name: 'occurred_at', kind: 'message', T: Timestamp },
    { no: 5, name: 'targets', kind: 'message', T: EID, repeated: true },
    { no: 6, name: 'message', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'context', kind: 'message', T: Struct },
    {
      no: 8,
      name: 'caller_identity_chain',
      kind: 'message',
      T: IdentityLink,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AuditLog {
    return new AuditLog().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AuditLog {
    return new AuditLog().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AuditLog {
    return new AuditLog().fromJsonString(jsonString, options)
  }

  static equals(
    a: AuditLog | PlainMessage<AuditLog> | undefined,
    b: AuditLog | PlainMessage<AuditLog> | undefined
  ): boolean {
    return proto3.util.equals(AuditLog, a, b)
  }
}
