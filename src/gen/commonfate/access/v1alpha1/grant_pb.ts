// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/access/v1alpha1/grant.proto (package commonfate.access.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Duration, Message, proto3, Timestamp } from '@bufbuild/protobuf'
import { NamedEID } from './named_eid_pb.js'
import { User } from './user_pb.js'

/**
 * @generated from enum commonfate.access.v1alpha1.GrantStatus
 */
export enum GrantStatus {
  /**
   * @generated from enum value: GRANT_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Awaiting a manual review.
   *
   * @generated from enum value: GRANT_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * The grant to the entitlement is currently active.
   *
   * @generated from enum value: GRANT_STATUS_ACTIVE = 3;
   */
  ACTIVE = 3,

  /**
   * No longer active. Grants may be closed due to several reasons, such as:
   * - the grant was cancelled by the user
   * - the grant was revoked by an administrator
   * - the grant has expired
   *
   * @generated from enum value: GRANT_STATUS_CLOSED = 4;
   */
  CLOSED = 4
}
// Retrieve enum metadata with: proto3.getEnumType(GrantStatus)
proto3.util.setEnumType(GrantStatus, 'commonfate.access.v1alpha1.GrantStatus', [
  { no: 0, name: 'GRANT_STATUS_UNSPECIFIED' },
  { no: 1, name: 'GRANT_STATUS_PENDING' },
  { no: 3, name: 'GRANT_STATUS_ACTIVE' },
  { no: 4, name: 'GRANT_STATUS_CLOSED' }
])

/**
 * @generated from enum commonfate.access.v1alpha1.ProvisioningStatus
 */
export enum ProvisioningStatus {
  /**
   * @generated from enum value: PROVISIONING_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Provisioning has not been attempted. This is the value before the Grant is activated.
   *
   * @generated from enum value: PROVISIONING_STATUS_NOT_ATTEMPTED = 1;
   */
  NOT_ATTEMPTED = 1,

  /**
   * The Grant is currently being provisioned.
   *
   * @generated from enum value: PROVISIONING_STATUS_ATTEMPTING = 2;
   */
  ATTEMPTING = 2,

  /**
   * Provisioning has completed successfully.
   *
   * @generated from enum value: PROVISIONING_STATUS_SUCCESSFUL = 3;
   */
  SUCCESSFUL = 3
}
// Retrieve enum metadata with: proto3.getEnumType(ProvisioningStatus)
proto3.util.setEnumType(
  ProvisioningStatus,
  'commonfate.access.v1alpha1.ProvisioningStatus',
  [
    { no: 0, name: 'PROVISIONING_STATUS_UNSPECIFIED' },
    { no: 1, name: 'PROVISIONING_STATUS_NOT_ATTEMPTED' },
    { no: 2, name: 'PROVISIONING_STATUS_ATTEMPTING' },
    { no: 3, name: 'PROVISIONING_STATUS_SUCCESSFUL' }
  ]
)

/**
 * @generated from message commonfate.access.v1alpha1.Grant
 */
export class Grant extends Message<Grant> {
  /**
   * The ID of the Grant.
   *
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * A user-friendly name describing the access, such as "AdministratorAccess to tax-api-prod"
   *
   * @generated from field: string name = 2;
   */
  name = ''

  /**
   * The resource being requested.
   *
   * @generated from field: commonfate.access.v1alpha1.NamedEID target = 3;
   */
  target?: NamedEID

  /**
   * The role being requested, such as "View" or "Admin".
   *
   * @generated from field: commonfate.access.v1alpha1.NamedEID role = 4;
   */
  role?: NamedEID

  /**
   * The user or service account that requested the access.
   *
   * If a service account requested access, the 'name' and 'email' may be empty.
   *
   * @generated from field: commonfate.access.v1alpha1.User principal = 5;
   */
  principal?: User

  /**
   * The status of the Grant.
   *
   * @generated from field: commonfate.access.v1alpha1.GrantStatus status = 6;
   */
  status = GrantStatus.UNSPECIFIED

  /**
   * For active grants, the time that the access is due to expire.
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 8;
   */
  expiresAt?: Timestamp

  /**
   * For active grants, the time that the user may attempt to extend the grant.
   * If empty, extension is not permitted.
   *
   * @generated from field: google.protobuf.Timestamp try_extend_after = 9;
   */
  tryExtendAfter?: Timestamp

  /**
   * The ID of the Access Request associated with the Grant.
   *
   * @generated from field: string access_request_id = 10;
   */
  accessRequestId = ''

  /**
   * Approved is true if there are any approving reviews on the Grant.
   *
   * @generated from field: bool approved = 11;
   */
  approved = false

  /**
   * The time that the grant was closed.
   *
   * @generated from field: google.protobuf.Timestamp closed_at = 12;
   */
  closedAt?: Timestamp

  /**
   * For grants which were activated, the time that the access was activated.
   *
   * @generated from field: google.protobuf.Timestamp activated_at = 13;
   */
  activatedAt?: Timestamp

  /**
   * For grants which were activated, the time that the access was deprovisioned.
   *
   * @generated from field: google.protobuf.Timestamp deprovisioned_at = 14;
   */
  deprovisionedAt?: Timestamp

  /**
   * The provisioning status of the Grant. This status tracks whether the entitlements have been successfully provisioned in the integration that Common Fate is provisioning access to, such as AWS or GCP.
   *
   * @generated from field: commonfate.access.v1alpha1.ProvisioningStatus provisioning_status = 15;
   */
  provisioningStatus = ProvisioningStatus.UNSPECIFIED

  /**
   * @generated from field: google.protobuf.Duration duration = 16;
   */
  duration?: Duration

  constructor(data?: PartialMessage<Grant>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.Grant'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'target', kind: 'message', T: NamedEID },
    { no: 4, name: 'role', kind: 'message', T: NamedEID },
    { no: 5, name: 'principal', kind: 'message', T: User },
    { no: 6, name: 'status', kind: 'enum', T: proto3.getEnumType(GrantStatus) },
    { no: 8, name: 'expires_at', kind: 'message', T: Timestamp },
    { no: 9, name: 'try_extend_after', kind: 'message', T: Timestamp },
    {
      no: 10,
      name: 'access_request_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    { no: 11, name: 'approved', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: 'closed_at', kind: 'message', T: Timestamp },
    { no: 13, name: 'activated_at', kind: 'message', T: Timestamp },
    { no: 14, name: 'deprovisioned_at', kind: 'message', T: Timestamp },
    {
      no: 15,
      name: 'provisioning_status',
      kind: 'enum',
      T: proto3.getEnumType(ProvisioningStatus)
    },
    { no: 16, name: 'duration', kind: 'message', T: Duration }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Grant {
    return new Grant().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Grant {
    return new Grant().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Grant {
    return new Grant().fromJsonString(jsonString, options)
  }

  static equals(
    a: Grant | PlainMessage<Grant> | undefined,
    b: Grant | PlainMessage<Grant> | undefined
  ): boolean {
    return proto3.util.equals(Grant, a, b)
  }
}
