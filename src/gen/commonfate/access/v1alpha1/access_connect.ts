// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts,import_extension=none"
// @generated from file commonfate/access/v1alpha1/access.proto (package commonfate.access.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  BatchEnsureRequest,
  BatchEnsureResponse,
  PreviewEntitlementAccessRequest,
  PreviewEntitlementAccessResponse,
  PreviewUserAccessRequest,
  PreviewUserAccessResponse,
  QueryApproversRequest,
  QueryApproversResponse,
  QueryAvailabilitiesRequest,
  QueryAvailabilitiesResponse,
  QueryEntitlementsRequest,
  QueryEntitlementsResponse
} from './access_pb'
import { MethodKind } from '@bufbuild/protobuf'

/**
 * AccessService is the Access Handler's user-facing API.
 * Users call this API to ensure that they have access to entitlements.
 *
 * @generated from service commonfate.access.v1alpha1.AccessService
 */
export const AccessService = {
  typeName: 'commonfate.access.v1alpha1.AccessService',
  methods: {
    /**
     * BatchEnsure is a high-level declarative API which can be called to ensure access has been provisioned to multiple entitlements.
     *
     * The method checks whether the entitlement has been provisioned to the user.
     * If the entitlement has not been provisioned, an Access Request will be created for the entitlement.
     * If a pending Access Request exists for the entitlement, this request is returned.
     *
     * In future, this method may trigger an extension to any Access Requests which are due to expire.
     *
     * @generated from rpc commonfate.access.v1alpha1.AccessService.BatchEnsure
     */
    batchEnsure: {
      name: 'BatchEnsure',
      I: BatchEnsureRequest,
      O: BatchEnsureResponse,
      kind: MethodKind.Unary
    },
    /**
     * Query for JIT availabilities.
     *
     * @generated from rpc commonfate.access.v1alpha1.AccessService.QueryAvailabilities
     */
    queryAvailabilities: {
      name: 'QueryAvailabilities',
      I: QueryAvailabilitiesRequest,
      O: QueryAvailabilitiesResponse,
      kind: MethodKind.Unary
    },
    /**
     * @generated from rpc commonfate.access.v1alpha1.AccessService.QueryEntitlements
     */
    queryEntitlements: {
      name: 'QueryEntitlements',
      I: QueryEntitlementsRequest,
      O: QueryEntitlementsResponse,
      kind: MethodKind.Unary
    },
    /**
     * @generated from rpc commonfate.access.v1alpha1.AccessService.QueryApprovers
     */
    queryApprovers: {
      name: 'QueryApprovers',
      I: QueryApproversRequest,
      O: QueryApproversResponse,
      kind: MethodKind.Unary
    },
    /**
     * @generated from rpc commonfate.access.v1alpha1.AccessService.PreviewUserAccess
     */
    previewUserAccess: {
      name: 'PreviewUserAccess',
      I: PreviewUserAccessRequest,
      O: PreviewUserAccessResponse,
      kind: MethodKind.Unary
    },
    /**
     * @generated from rpc commonfate.access.v1alpha1.AccessService.PreviewEntitlementAccess
     */
    previewEntitlementAccess: {
      name: 'PreviewEntitlementAccess',
      I: PreviewEntitlementAccessRequest,
      O: PreviewEntitlementAccessResponse,
      kind: MethodKind.Unary
    }
  }
} as const
