// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/access/v1alpha1/resource.proto (package commonfate.cloud.access.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * @generated from message commonfate.cloud.access.v1alpha1.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * @generated from oneof commonfate.cloud.access.v1alpha1.Resource.resource
   */
  resource:
    | {
        /**
         * @generated from field: commonfate.cloud.access.v1alpha1.AWSAccount aws_account = 1;
         */
        value: AWSAccount
        case: 'awsAccount'
      }
    | {
        /**
         * @generated from field: commonfate.cloud.access.v1alpha1.GCPProject gcp_project = 2;
         */
        value: GCPProject
        case: 'gcpProject'
      }
    | { case: undefined; value?: undefined } = { case: undefined }

  constructor(data?: PartialMessage<Resource>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.cloud.access.v1alpha1.Resource'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'aws_account',
      kind: 'message',
      T: AWSAccount,
      oneof: 'resource'
    },
    {
      no: 2,
      name: 'gcp_project',
      kind: 'message',
      T: GCPProject,
      oneof: 'resource'
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Resource {
    return new Resource().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Resource {
    return new Resource().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Resource {
    return new Resource().fromJsonString(jsonString, options)
  }

  static equals(
    a: Resource | PlainMessage<Resource> | undefined,
    b: Resource | PlainMessage<Resource> | undefined
  ): boolean {
    return proto3.util.equals(Resource, a, b)
  }
}

/**
 * @generated from message commonfate.cloud.access.v1alpha1.GCPProject
 */
export class GCPProject extends Message<GCPProject> {
  /**
   * @generated from field: string project = 1;
   */
  project = ''

  /**
   * @generated from field: string role = 2;
   */
  role = ''

  constructor(data?: PartialMessage<GCPProject>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.cloud.access.v1alpha1.GCPProject'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'project', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'role', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GCPProject {
    return new GCPProject().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GCPProject {
    return new GCPProject().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GCPProject {
    return new GCPProject().fromJsonString(jsonString, options)
  }

  static equals(
    a: GCPProject | PlainMessage<GCPProject> | undefined,
    b: GCPProject | PlainMessage<GCPProject> | undefined
  ): boolean {
    return proto3.util.equals(GCPProject, a, b)
  }
}

/**
 * @generated from message commonfate.cloud.access.v1alpha1.AWSAccount
 */
export class AWSAccount extends Message<AWSAccount> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = ''

  /**
   * @generated from field: string role = 2;
   */
  role = ''

  constructor(data?: PartialMessage<AWSAccount>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.cloud.access.v1alpha1.AWSAccount'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'role', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AWSAccount {
    return new AWSAccount().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AWSAccount {
    return new AWSAccount().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AWSAccount {
    return new AWSAccount().fromJsonString(jsonString, options)
  }

  static equals(
    a: AWSAccount | PlainMessage<AWSAccount> | undefined,
    b: AWSAccount | PlainMessage<AWSAccount> | undefined
  ): boolean {
    return proto3.util.equals(AWSAccount, a, b)
  }
}
