// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/access/v1alpha1/access_request.proto (package commonfate.access.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3, Timestamp } from '@bufbuild/protobuf'
import { Order } from '../../entity/v1alpha1/entity_service_pb.js'
import { Grant } from './grant_pb.js'
import { User } from './user_pb.js'
import { Diagnostic } from './diagnostic_pb.js'

/**
 * @generated from message commonfate.access.v1alpha1.QueryAccessRequestsRequest
 */
export class QueryAccessRequestsRequest extends Message<QueryAccessRequestsRequest> {
  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 1;
   */
  pageToken = ''

  /**
   * @generated from field: bool archived = 2;
   */
  archived = false

  /**
   * @generated from field: optional commonfate.entity.v1alpha1.Order order = 3;
   */
  order?: Order

  constructor(data?: PartialMessage<QueryAccessRequestsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.QueryAccessRequestsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'archived', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 3,
      name: 'order',
      kind: 'enum',
      T: proto3.getEnumType(Order),
      opt: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryAccessRequestsRequest {
    return new QueryAccessRequestsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryAccessRequestsRequest {
    return new QueryAccessRequestsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryAccessRequestsRequest {
    return new QueryAccessRequestsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAccessRequestsRequest
      | PlainMessage<QueryAccessRequestsRequest>
      | undefined,
    b:
      | QueryAccessRequestsRequest
      | PlainMessage<QueryAccessRequestsRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryAccessRequestsRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryAccessRequestsResponse
 */
export class QueryAccessRequestsResponse extends Message<QueryAccessRequestsResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.AccessRequest access_requests = 1;
   */
  accessRequests: AccessRequest[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<QueryAccessRequestsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.QueryAccessRequestsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'access_requests',
      kind: 'message',
      T: AccessRequest,
      repeated: true
    },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryAccessRequestsResponse {
    return new QueryAccessRequestsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryAccessRequestsResponse {
    return new QueryAccessRequestsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryAccessRequestsResponse {
    return new QueryAccessRequestsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAccessRequestsResponse
      | PlainMessage<QueryAccessRequestsResponse>
      | undefined,
    b:
      | QueryAccessRequestsResponse
      | PlainMessage<QueryAccessRequestsResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryAccessRequestsResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.GetAccessRequestRequest
 */
export class GetAccessRequestRequest extends Message<GetAccessRequestRequest> {
  /**
   * The ID of the Access Request.
   *
   * @generated from field: string id = 1;
   */
  id = ''

  constructor(data?: PartialMessage<GetAccessRequestRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.GetAccessRequestRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAccessRequestRequest {
    return new GetAccessRequestRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAccessRequestRequest {
    return new GetAccessRequestRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAccessRequestRequest {
    return new GetAccessRequestRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetAccessRequestRequest
      | PlainMessage<GetAccessRequestRequest>
      | undefined,
    b:
      | GetAccessRequestRequest
      | PlainMessage<GetAccessRequestRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(GetAccessRequestRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.GetAccessRequestResponse
 */
export class GetAccessRequestResponse extends Message<GetAccessRequestResponse> {
  /**
   * @generated from field: commonfate.access.v1alpha1.AccessRequest access_request = 1;
   */
  accessRequest?: AccessRequest

  constructor(data?: PartialMessage<GetAccessRequestResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.GetAccessRequestResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'access_request', kind: 'message', T: AccessRequest }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetAccessRequestResponse {
    return new GetAccessRequestResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetAccessRequestResponse {
    return new GetAccessRequestResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetAccessRequestResponse {
    return new GetAccessRequestResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | GetAccessRequestResponse
      | PlainMessage<GetAccessRequestResponse>
      | undefined,
    b:
      | GetAccessRequestResponse
      | PlainMessage<GetAccessRequestResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(GetAccessRequestResponse, a, b)
  }
}

/**
 * A request to be given entitlements allowing <Action> to be performed on <Resource>.
 *
 * For example, if the action is 'Admin', and the resource is AWS::Account::123456789012,
 * This request is for entitlements allowing Admin access to the account 123456789012.
 *
 * @generated from message commonfate.access.v1alpha1.AccessRequest
 */
export class AccessRequest extends Message<AccessRequest> {
  /**
   * The ID of the Access Request.
   *
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * Batch ID of the Access Request. Access Requests created in the same
   * API call have the same Batch ID.
   *
   * @generated from field: string batch_id = 2;
   */
  batchId = ''

  /**
   * The grants under consideration for access.
   *
   * @generated from field: repeated commonfate.access.v1alpha1.Grant grants = 3;
   */
  grants: Grant[] = []

  /**
   * An access request is reviewable if one or more Grants in the request
   * requires a manual review.
   *
   * @generated from field: bool reviewable = 4;
   */
  reviewable = false

  /**
   * True if the Access Request already existed and wasn't created by the API call.
   *
   * @generated from field: bool existing = 5;
   */
  existing = false

  /**
   * The timestamp that the request was created at.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp

  /**
   * The justification supplied when the request was created
   *
   * @generated from field: commonfate.access.v1alpha1.Justification justification = 9;
   */
  justification?: Justification

  /**
   * The user or service account that requested the access.
   *
   * If a service account requested access, the 'name' and 'email' may be empty.
   *
   * @generated from field: commonfate.access.v1alpha1.User principal = 10;
   */
  principal?: User

  constructor(data?: PartialMessage<AccessRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.AccessRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'batch_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'grants', kind: 'message', T: Grant, repeated: true },
    { no: 4, name: 'reviewable', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: 'existing', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: 'created_at', kind: 'message', T: Timestamp },
    { no: 9, name: 'justification', kind: 'message', T: Justification },
    { no: 10, name: 'principal', kind: 'message', T: User }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AccessRequest {
    return new AccessRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AccessRequest {
    return new AccessRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AccessRequest {
    return new AccessRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: AccessRequest | PlainMessage<AccessRequest> | undefined,
    b: AccessRequest | PlainMessage<AccessRequest> | undefined
  ): boolean {
    return proto3.util.equals(AccessRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.ApproveAccessRequestRequest
 */
export class ApproveAccessRequestRequest extends Message<ApproveAccessRequestRequest> {
  /**
   * The ID of the Access Request.
   *
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * If provided, will only approve the grants with the specified IDs
   *
   * @generated from field: repeated string approve_grants = 2;
   */
  approveGrants: string[] = []

  constructor(data?: PartialMessage<ApproveAccessRequestRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.ApproveAccessRequestRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'approve_grants',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ApproveAccessRequestRequest {
    return new ApproveAccessRequestRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ApproveAccessRequestRequest {
    return new ApproveAccessRequestRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ApproveAccessRequestRequest {
    return new ApproveAccessRequestRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ApproveAccessRequestRequest
      | PlainMessage<ApproveAccessRequestRequest>
      | undefined,
    b:
      | ApproveAccessRequestRequest
      | PlainMessage<ApproveAccessRequestRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(ApproveAccessRequestRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.ApproveAccessRequestResponse
 */
export class ApproveAccessRequestResponse extends Message<ApproveAccessRequestResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.Diagnostic diagnostics = 1;
   */
  diagnostics: Diagnostic[] = []

  constructor(data?: PartialMessage<ApproveAccessRequestResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.ApproveAccessRequestResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'diagnostics',
      kind: 'message',
      T: Diagnostic,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ApproveAccessRequestResponse {
    return new ApproveAccessRequestResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ApproveAccessRequestResponse {
    return new ApproveAccessRequestResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ApproveAccessRequestResponse {
    return new ApproveAccessRequestResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | ApproveAccessRequestResponse
      | PlainMessage<ApproveAccessRequestResponse>
      | undefined,
    b:
      | ApproveAccessRequestResponse
      | PlainMessage<ApproveAccessRequestResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(ApproveAccessRequestResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.CloseAccessRequestRequest
 */
export class CloseAccessRequestRequest extends Message<CloseAccessRequestRequest> {
  /**
   * The ID of the Access Request.
   *
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * If provided, will only close the grants with the specified IDs
   *
   * @generated from field: repeated string close_grants = 2;
   */
  closeGrants: string[] = []

  constructor(data?: PartialMessage<CloseAccessRequestRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.CloseAccessRequestRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'close_grants',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CloseAccessRequestRequest {
    return new CloseAccessRequestRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CloseAccessRequestRequest {
    return new CloseAccessRequestRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CloseAccessRequestRequest {
    return new CloseAccessRequestRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CloseAccessRequestRequest
      | PlainMessage<CloseAccessRequestRequest>
      | undefined,
    b:
      | CloseAccessRequestRequest
      | PlainMessage<CloseAccessRequestRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CloseAccessRequestRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.CloseAccessRequestResponse
 */
export class CloseAccessRequestResponse extends Message<CloseAccessRequestResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.Diagnostic diagnostics = 1;
   */
  diagnostics: Diagnostic[] = []

  constructor(data?: PartialMessage<CloseAccessRequestResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.CloseAccessRequestResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'diagnostics',
      kind: 'message',
      T: Diagnostic,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CloseAccessRequestResponse {
    return new CloseAccessRequestResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CloseAccessRequestResponse {
    return new CloseAccessRequestResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CloseAccessRequestResponse {
    return new CloseAccessRequestResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CloseAccessRequestResponse
      | PlainMessage<CloseAccessRequestResponse>
      | undefined,
    b:
      | CloseAccessRequestResponse
      | PlainMessage<CloseAccessRequestResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CloseAccessRequestResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.ActivateAccessRequestRequest
 */
export class ActivateAccessRequestRequest extends Message<ActivateAccessRequestRequest> {
  /**
   * The ID of the Access Request.
   *
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * If provided, will only activate the grants with the specified IDs
   *
   * @generated from field: repeated string activate_grants = 2;
   */
  activateGrants: string[] = []

  constructor(data?: PartialMessage<ActivateAccessRequestRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.ActivateAccessRequestRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'activate_grants',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ActivateAccessRequestRequest {
    return new ActivateAccessRequestRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ActivateAccessRequestRequest {
    return new ActivateAccessRequestRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ActivateAccessRequestRequest {
    return new ActivateAccessRequestRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | ActivateAccessRequestRequest
      | PlainMessage<ActivateAccessRequestRequest>
      | undefined,
    b:
      | ActivateAccessRequestRequest
      | PlainMessage<ActivateAccessRequestRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(ActivateAccessRequestRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.ActivateAccessRequestResponse
 */
export class ActivateAccessRequestResponse extends Message<ActivateAccessRequestResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.Diagnostic diagnostics = 1;
   */
  diagnostics: Diagnostic[] = []

  constructor(data?: PartialMessage<ActivateAccessRequestResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.ActivateAccessRequestResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'diagnostics',
      kind: 'message',
      T: Diagnostic,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ActivateAccessRequestResponse {
    return new ActivateAccessRequestResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ActivateAccessRequestResponse {
    return new ActivateAccessRequestResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ActivateAccessRequestResponse {
    return new ActivateAccessRequestResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | ActivateAccessRequestResponse
      | PlainMessage<ActivateAccessRequestResponse>
      | undefined,
    b:
      | ActivateAccessRequestResponse
      | PlainMessage<ActivateAccessRequestResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(ActivateAccessRequestResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.Justification
 */
export class Justification extends Message<Justification> {
  /**
   * @generated from field: optional string reason = 1;
   */
  reason?: string

  constructor(data?: PartialMessage<Justification>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.Justification'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'reason',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Justification {
    return new Justification().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Justification {
    return new Justification().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Justification {
    return new Justification().fromJsonString(jsonString, options)
  }

  static equals(
    a: Justification | PlainMessage<Justification> | undefined,
    b: Justification | PlainMessage<Justification> | undefined
  ): boolean {
    return proto3.util.equals(Justification, a, b)
  }
}
