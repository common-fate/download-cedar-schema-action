// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/access/v1alpha1/access.proto (package commonfate.access.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Duration, Message, proto3 } from '@bufbuild/protobuf'
import { EID } from '../../entity/v1alpha1/eid_pb.js'
import { User } from './user_pb.js'
import { NamedEID } from './named_eid_pb.js'
import { Justification } from './access_request_pb.js'
import { Diagnostic } from './diagnostic_pb.js'
import { Grant } from './grant_pb.js'

/**
 * @generated from enum commonfate.access.v1alpha1.GrantChange
 */
export enum GrantChange {
  /**
   * @generated from enum value: GRANT_CHANGE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The Grant has been newly requested
   *
   * @generated from enum value: GRANT_CHANGE_REQUESTED = 1;
   */
  REQUESTED = 1,

  /**
   * The Grant has been activated
   *
   * @generated from enum value: GRANT_CHANGE_ACTIVATED = 2;
   */
  ACTIVATED = 2,

  /**
   * The Grant has been extended
   *
   * @generated from enum value: GRANT_CHANGE_EXTENDED = 3;
   */
  EXTENDED = 3,

  /**
   * The provisioning process failed for the Grant
   *
   * @generated from enum value: GRANT_CHANGE_PROVISIONING_FAILED = 4;
   */
  PROVISIONING_FAILED = 4
}
// Retrieve enum metadata with: proto3.getEnumType(GrantChange)
proto3.util.setEnumType(GrantChange, 'commonfate.access.v1alpha1.GrantChange', [
  { no: 0, name: 'GRANT_CHANGE_UNSPECIFIED' },
  { no: 1, name: 'GRANT_CHANGE_REQUESTED' },
  { no: 2, name: 'GRANT_CHANGE_ACTIVATED' },
  { no: 3, name: 'GRANT_CHANGE_EXTENDED' },
  { no: 4, name: 'GRANT_CHANGE_PROVISIONING_FAILED' }
])

/**
 * @generated from message commonfate.access.v1alpha1.QueryApproversRequest
 */
export class QueryApproversRequest extends Message<QueryApproversRequest> {
  /**
   * @generated from oneof commonfate.access.v1alpha1.QueryApproversRequest.query
   */
  query:
    | {
        /**
         * @generated from field: commonfate.access.v1alpha1.TargetRole target_role = 1;
         */
        value: TargetRole
        case: 'targetRole'
      }
    | {
        /**
         * @generated from field: commonfate.entity.v1alpha1.EID grant = 2;
         */
        value: EID
        case: 'grant'
      }
    | { case: undefined; value?: undefined } = { case: undefined }

  constructor(data?: PartialMessage<QueryApproversRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.QueryApproversRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'target_role',
      kind: 'message',
      T: TargetRole,
      oneof: 'query'
    },
    { no: 2, name: 'grant', kind: 'message', T: EID, oneof: 'query' }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryApproversRequest {
    return new QueryApproversRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryApproversRequest {
    return new QueryApproversRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryApproversRequest {
    return new QueryApproversRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryApproversRequest | PlainMessage<QueryApproversRequest> | undefined,
    b: QueryApproversRequest | PlainMessage<QueryApproversRequest> | undefined
  ): boolean {
    return proto3.util.equals(QueryApproversRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.TargetRole
 */
export class TargetRole extends Message<TargetRole> {
  /**
   * @generated from field: commonfate.access.v1alpha1.Specifier target = 1;
   */
  target?: Specifier

  /**
   * @generated from field: commonfate.access.v1alpha1.Specifier role = 2;
   */
  role?: Specifier

  constructor(data?: PartialMessage<TargetRole>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.TargetRole'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'target', kind: 'message', T: Specifier },
    { no: 2, name: 'role', kind: 'message', T: Specifier }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TargetRole {
    return new TargetRole().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TargetRole {
    return new TargetRole().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TargetRole {
    return new TargetRole().fromJsonString(jsonString, options)
  }

  static equals(
    a: TargetRole | PlainMessage<TargetRole> | undefined,
    b: TargetRole | PlainMessage<TargetRole> | undefined
  ): boolean {
    return proto3.util.equals(TargetRole, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryApproversResponse
 */
export class QueryApproversResponse extends Message<QueryApproversResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.User approvers = 1;
   */
  approvers: User[] = []

  constructor(data?: PartialMessage<QueryApproversResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.QueryApproversResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'approvers', kind: 'message', T: User, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryApproversResponse {
    return new QueryApproversResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryApproversResponse {
    return new QueryApproversResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryApproversResponse {
    return new QueryApproversResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryApproversResponse
      | PlainMessage<QueryApproversResponse>
      | undefined,
    b: QueryApproversResponse | PlainMessage<QueryApproversResponse> | undefined
  ): boolean {
    return proto3.util.equals(QueryApproversResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryAvailabilitiesRequest
 */
export class QueryAvailabilitiesRequest extends Message<QueryAvailabilitiesRequest> {
  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 10;
   */
  pageToken = ''

  constructor(data?: PartialMessage<QueryAvailabilitiesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.QueryAvailabilitiesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryAvailabilitiesRequest {
    return new QueryAvailabilitiesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryAvailabilitiesRequest {
    return new QueryAvailabilitiesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryAvailabilitiesRequest {
    return new QueryAvailabilitiesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAvailabilitiesRequest
      | PlainMessage<QueryAvailabilitiesRequest>
      | undefined,
    b:
      | QueryAvailabilitiesRequest
      | PlainMessage<QueryAvailabilitiesRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryAvailabilitiesRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryAvailabilitiesResponse
 */
export class QueryAvailabilitiesResponse extends Message<QueryAvailabilitiesResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.Availability availabilities = 1;
   */
  availabilities: Availability[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<QueryAvailabilitiesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.QueryAvailabilitiesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'availabilities',
      kind: 'message',
      T: Availability,
      repeated: true
    },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryAvailabilitiesResponse {
    return new QueryAvailabilitiesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryAvailabilitiesResponse {
    return new QueryAvailabilitiesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryAvailabilitiesResponse {
    return new QueryAvailabilitiesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAvailabilitiesResponse
      | PlainMessage<QueryAvailabilitiesResponse>
      | undefined,
    b:
      | QueryAvailabilitiesResponse
      | PlainMessage<QueryAvailabilitiesResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryAvailabilitiesResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryEntitlementsRequest
 */
export class QueryEntitlementsRequest extends Message<QueryEntitlementsRequest> {
  /**
   * @generated from field: optional string target_type = 1;
   */
  targetType?: string

  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 10;
   */
  pageToken = ''

  constructor(data?: PartialMessage<QueryEntitlementsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.QueryEntitlementsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'target_type',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true
    },
    { no: 10, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryEntitlementsRequest {
    return new QueryEntitlementsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryEntitlementsRequest {
    return new QueryEntitlementsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryEntitlementsRequest {
    return new QueryEntitlementsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryEntitlementsRequest
      | PlainMessage<QueryEntitlementsRequest>
      | undefined,
    b:
      | QueryEntitlementsRequest
      | PlainMessage<QueryEntitlementsRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryEntitlementsRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryEntitlementsResponse
 */
export class QueryEntitlementsResponse extends Message<QueryEntitlementsResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.Entitlement entitlements = 1;
   */
  entitlements: Entitlement[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<QueryEntitlementsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.QueryEntitlementsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'entitlements',
      kind: 'message',
      T: Entitlement,
      repeated: true
    },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryEntitlementsResponse {
    return new QueryEntitlementsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryEntitlementsResponse {
    return new QueryEntitlementsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryEntitlementsResponse {
    return new QueryEntitlementsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryEntitlementsResponse
      | PlainMessage<QueryEntitlementsResponse>
      | undefined,
    b:
      | QueryEntitlementsResponse
      | PlainMessage<QueryEntitlementsResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryEntitlementsResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.PreviewUserAccessRequest
 */
export class PreviewUserAccessRequest extends Message<PreviewUserAccessRequest> {
  /**
   * @generated from field: commonfate.access.v1alpha1.Specifier principal = 1;
   */
  principal?: Specifier

  /**
   * @generated from field: optional string target_type = 2;
   */
  targetType?: string

  constructor(data?: PartialMessage<PreviewUserAccessRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.PreviewUserAccessRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'principal', kind: 'message', T: Specifier },
    {
      no: 2,
      name: 'target_type',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PreviewUserAccessRequest {
    return new PreviewUserAccessRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PreviewUserAccessRequest {
    return new PreviewUserAccessRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PreviewUserAccessRequest {
    return new PreviewUserAccessRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | PreviewUserAccessRequest
      | PlainMessage<PreviewUserAccessRequest>
      | undefined,
    b:
      | PreviewUserAccessRequest
      | PlainMessage<PreviewUserAccessRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(PreviewUserAccessRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.PreviewUserAccessResponse
 */
export class PreviewUserAccessResponse extends Message<PreviewUserAccessResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.Entitlement entitlements = 1;
   */
  entitlements: Entitlement[] = []

  constructor(data?: PartialMessage<PreviewUserAccessResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.PreviewUserAccessResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'entitlements',
      kind: 'message',
      T: Entitlement,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PreviewUserAccessResponse {
    return new PreviewUserAccessResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PreviewUserAccessResponse {
    return new PreviewUserAccessResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PreviewUserAccessResponse {
    return new PreviewUserAccessResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | PreviewUserAccessResponse
      | PlainMessage<PreviewUserAccessResponse>
      | undefined,
    b:
      | PreviewUserAccessResponse
      | PlainMessage<PreviewUserAccessResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(PreviewUserAccessResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.PreviewEntitlementAccessRequest
 */
export class PreviewEntitlementAccessRequest extends Message<PreviewEntitlementAccessRequest> {
  /**
   * @generated from field: commonfate.access.v1alpha1.Specifier target = 1;
   */
  target?: Specifier

  /**
   * @generated from field: commonfate.access.v1alpha1.Specifier role = 2;
   */
  role?: Specifier

  constructor(data?: PartialMessage<PreviewEntitlementAccessRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.PreviewEntitlementAccessRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'target', kind: 'message', T: Specifier },
    { no: 2, name: 'role', kind: 'message', T: Specifier }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PreviewEntitlementAccessRequest {
    return new PreviewEntitlementAccessRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PreviewEntitlementAccessRequest {
    return new PreviewEntitlementAccessRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PreviewEntitlementAccessRequest {
    return new PreviewEntitlementAccessRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | PreviewEntitlementAccessRequest
      | PlainMessage<PreviewEntitlementAccessRequest>
      | undefined,
    b:
      | PreviewEntitlementAccessRequest
      | PlainMessage<PreviewEntitlementAccessRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(PreviewEntitlementAccessRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.PreviewEntitlementAccessResponse
 */
export class PreviewEntitlementAccessResponse extends Message<PreviewEntitlementAccessResponse> {
  /**
   * The principals which have access to request access and whether that access will be auto approved
   *
   * @generated from field: repeated commonfate.access.v1alpha1.PrincipalAccess access = 1;
   */
  access: PrincipalAccess[] = []

  constructor(data?: PartialMessage<PreviewEntitlementAccessResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.PreviewEntitlementAccessResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'access',
      kind: 'message',
      T: PrincipalAccess,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PreviewEntitlementAccessResponse {
    return new PreviewEntitlementAccessResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PreviewEntitlementAccessResponse {
    return new PreviewEntitlementAccessResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PreviewEntitlementAccessResponse {
    return new PreviewEntitlementAccessResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | PreviewEntitlementAccessResponse
      | PlainMessage<PreviewEntitlementAccessResponse>
      | undefined,
    b:
      | PreviewEntitlementAccessResponse
      | PlainMessage<PreviewEntitlementAccessResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(PreviewEntitlementAccessResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.PrincipalAccess
 */
export class PrincipalAccess extends Message<PrincipalAccess> {
  /**
   * @generated from field: commonfate.access.v1alpha1.User principal = 1;
   */
  principal?: User

  /**
   * Whether or not it is auto approved
   *
   * @generated from field: bool auto_approved = 2;
   */
  autoApproved = false

  constructor(data?: PartialMessage<PrincipalAccess>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.PrincipalAccess'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'principal', kind: 'message', T: User },
    { no: 2, name: 'auto_approved', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): PrincipalAccess {
    return new PrincipalAccess().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): PrincipalAccess {
    return new PrincipalAccess().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): PrincipalAccess {
    return new PrincipalAccess().fromJsonString(jsonString, options)
  }

  static equals(
    a: PrincipalAccess | PlainMessage<PrincipalAccess> | undefined,
    b: PrincipalAccess | PlainMessage<PrincipalAccess> | undefined
  ): boolean {
    return proto3.util.equals(PrincipalAccess, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.Entitlement
 */
export class Entitlement extends Message<Entitlement> {
  /**
   * The particular resource which this entitlement gives access to
   *
   * @generated from field: commonfate.access.v1alpha1.NamedEID target = 1;
   */
  target?: NamedEID

  /**
   * The particular role this entitlement gives access to
   *
   * @generated from field: commonfate.access.v1alpha1.NamedEID role = 2;
   */
  role?: NamedEID

  /**
   * Whether or not it is auto approved
   *
   * @generated from field: bool auto_approved = 3;
   */
  autoApproved = false

  constructor(data?: PartialMessage<Entitlement>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.Entitlement'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'target', kind: 'message', T: NamedEID },
    { no: 2, name: 'role', kind: 'message', T: NamedEID },
    { no: 3, name: 'auto_approved', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Entitlement {
    return new Entitlement().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Entitlement {
    return new Entitlement().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Entitlement {
    return new Entitlement().fromJsonString(jsonString, options)
  }

  static equals(
    a: Entitlement | PlainMessage<Entitlement> | undefined,
    b: Entitlement | PlainMessage<Entitlement> | undefined
  ): boolean {
    return proto3.util.equals(Entitlement, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.Availability
 */
export class Availability extends Message<Availability> {
  /**
   * ID is just used internally and isn't really shown to users except for debugging purposes.
   * users refer to entitlements by the target and role, rather than the internal ID.
   *
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * The particular resource which this entitlement gives access to
   *
   * @generated from field: commonfate.access.v1alpha1.NamedEID target = 2;
   */
  target?: NamedEID

  /**
   * The particular role this entitlement gives access to
   *
   * @generated from field: commonfate.access.v1alpha1.NamedEID role = 3;
   */
  role?: NamedEID

  /**
   * the JIT workflow associated with the entitlement.
   *
   * @generated from field: string workflow_id = 4;
   */
  workflowId = ''

  /**
   * The permitted access duration.
   *
   * @generated from field: google.protobuf.Duration duration = 5;
   */
  duration?: Duration

  /**
   * @generated from field: uint32 priority = 6;
   */
  priority = 0

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID reviewers = 7;
   */
  reviewers?: EID

  /**
   * the ID of the selector which was used to match the targets
   *
   * @generated from field: commonfate.entity.v1alpha1.EID target_selector = 8;
   */
  targetSelector?: EID

  constructor(data?: PartialMessage<Availability>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.Availability'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'target', kind: 'message', T: NamedEID },
    { no: 3, name: 'role', kind: 'message', T: NamedEID },
    {
      no: 4,
      name: 'workflow_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    { no: 5, name: 'duration', kind: 'message', T: Duration },
    { no: 6, name: 'priority', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: 'reviewers', kind: 'message', T: EID },
    { no: 8, name: 'target_selector', kind: 'message', T: EID }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Availability {
    return new Availability().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Availability {
    return new Availability().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Availability {
    return new Availability().fromJsonString(jsonString, options)
  }

  static equals(
    a: Availability | PlainMessage<Availability> | undefined,
    b: Availability | PlainMessage<Availability> | undefined
  ): boolean {
    return proto3.util.equals(Availability, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.Specifier
 */
export class Specifier extends Message<Specifier> {
  /**
   * @generated from oneof commonfate.access.v1alpha1.Specifier.specify
   */
  specify:
    | {
        /**
         * Specify a resource using a EID. If you're using Common Fate programatically
         * and you know the resource you want to specify, you should use this field.
         *
         * @generated from field: commonfate.entity.v1alpha1.EID eid = 1;
         */
        value: EID
        case: 'eid'
      }
    | {
        /**
         * Specify a resource using a string lookup. This is used in our CLI
         * to allow end users to look up resources by name, ID and/or EID.
         *
         * The order of matching is:
         * 1. the 'lookup' field will be parsed as a EID - if it's valid it will be a EID lookup
         * 2. the 'lookup' field will be matched against all resource IDs
         * 3. the 'lookup' field will be matched against all resource names.
         *
         * If the lookup is a valid EID but it is not found, the API will return a Not Found error.
         * The API will return an Invalid Arguments error if the lookup is ambiguous and could match
         * multiple resources.
         *
         * @generated from field: string lookup = 2;
         */
        value: string
        case: 'lookup'
      }
    | { case: undefined; value?: undefined } = { case: undefined }

  constructor(data?: PartialMessage<Specifier>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.Specifier'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'eid', kind: 'message', T: EID, oneof: 'specify' },
    {
      no: 2,
      name: 'lookup',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      oneof: 'specify'
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Specifier {
    return new Specifier().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Specifier {
    return new Specifier().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Specifier {
    return new Specifier().fromJsonString(jsonString, options)
  }

  static equals(
    a: Specifier | PlainMessage<Specifier> | undefined,
    b: Specifier | PlainMessage<Specifier> | undefined
  ): boolean {
    return proto3.util.equals(Specifier, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.EntitlementInput
 */
export class EntitlementInput extends Message<EntitlementInput> {
  /**
   * The principal to grant access to.
   * If empty, the current caller will be used as the principal.
   *
   * @generated from field: commonfate.access.v1alpha1.Specifier principal = 1;
   */
  principal?: Specifier

  /**
   * The resource to grant the principal access to.
   *
   * @generated from field: commonfate.access.v1alpha1.Specifier target = 2;
   */
  target?: Specifier

  /**
   * The role to grant the principal access to the resource with.
   *
   * @generated from field: commonfate.access.v1alpha1.Specifier role = 3;
   */
  role?: Specifier

  /**
   * @generated from field: optional google.protobuf.Duration duration = 4;
   */
  duration?: Duration

  constructor(data?: PartialMessage<EntitlementInput>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.EntitlementInput'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'principal', kind: 'message', T: Specifier },
    { no: 2, name: 'target', kind: 'message', T: Specifier },
    { no: 3, name: 'role', kind: 'message', T: Specifier },
    { no: 4, name: 'duration', kind: 'message', T: Duration, opt: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): EntitlementInput {
    return new EntitlementInput().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): EntitlementInput {
    return new EntitlementInput().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): EntitlementInput {
    return new EntitlementInput().fromJsonString(jsonString, options)
  }

  static equals(
    a: EntitlementInput | PlainMessage<EntitlementInput> | undefined,
    b: EntitlementInput | PlainMessage<EntitlementInput> | undefined
  ): boolean {
    return proto3.util.equals(EntitlementInput, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.BatchEnsureRequest
 */
export class BatchEnsureRequest extends Message<BatchEnsureRequest> {
  /**
   * The entitlements to request access to.
   *
   * @generated from field: repeated commonfate.access.v1alpha1.EntitlementInput entitlements = 1;
   */
  entitlements: EntitlementInput[] = []

  /**
   * Optional justification as to why access is required.
   *
   * @generated from field: commonfate.access.v1alpha1.Justification justification = 2;
   */
  justification?: Justification

  /**
   * If true, will return a preview of changes rather than actually provisioning access.
   *
   * @generated from field: bool dry_run = 3;
   */
  dryRun = false

  constructor(data?: PartialMessage<BatchEnsureRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.BatchEnsureRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'entitlements',
      kind: 'message',
      T: EntitlementInput,
      repeated: true
    },
    { no: 2, name: 'justification', kind: 'message', T: Justification },
    { no: 3, name: 'dry_run', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BatchEnsureRequest {
    return new BatchEnsureRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BatchEnsureRequest {
    return new BatchEnsureRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BatchEnsureRequest {
    return new BatchEnsureRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: BatchEnsureRequest | PlainMessage<BatchEnsureRequest> | undefined,
    b: BatchEnsureRequest | PlainMessage<BatchEnsureRequest> | undefined
  ): boolean {
    return proto3.util.equals(BatchEnsureRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.BatchEnsureResponse
 */
export class BatchEnsureResponse extends Message<BatchEnsureResponse> {
  /**
   * An ID which can be used to debug the evaluation of the access policies
   * associated with the request.
   *
   * @generated from field: string trace_id = 1;
   */
  traceId = ''

  /**
   * @generated from field: repeated commonfate.access.v1alpha1.GrantState grants = 2;
   */
  grants: GrantState[] = []

  /**
   * User-facing diagnostic warnings, for messages such as the user not having permissions
   * to request some of the entitlements they asked for.
   *
   * Rather than failing the entire operation the Access Handler returns warnings.
   *
   * @generated from field: repeated commonfate.access.v1alpha1.Diagnostic diagnostics = 6;
   */
  diagnostics: Diagnostic[] = []

  constructor(data?: PartialMessage<BatchEnsureResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.BatchEnsureResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'trace_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'grants', kind: 'message', T: GrantState, repeated: true },
    {
      no: 6,
      name: 'diagnostics',
      kind: 'message',
      T: Diagnostic,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BatchEnsureResponse {
    return new BatchEnsureResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BatchEnsureResponse {
    return new BatchEnsureResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BatchEnsureResponse {
    return new BatchEnsureResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: BatchEnsureResponse | PlainMessage<BatchEnsureResponse> | undefined,
    b: BatchEnsureResponse | PlainMessage<BatchEnsureResponse> | undefined
  ): boolean {
    return proto3.util.equals(BatchEnsureResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.GrantState
 */
export class GrantState extends Message<GrantState> {
  /**
   * @generated from field: commonfate.access.v1alpha1.Grant grant = 1;
   */
  grant?: Grant

  /**
   * The change to the grant.
   * Will be unspecified if the grant has not been changed.
   *
   * @generated from field: commonfate.access.v1alpha1.GrantChange change = 2;
   */
  change = GrantChange.UNSPECIFIED

  constructor(data?: PartialMessage<GrantState>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.GrantState'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'grant', kind: 'message', T: Grant },
    { no: 2, name: 'change', kind: 'enum', T: proto3.getEnumType(GrantChange) }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GrantState {
    return new GrantState().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GrantState {
    return new GrantState().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GrantState {
    return new GrantState().fromJsonString(jsonString, options)
  }

  static equals(
    a: GrantState | PlainMessage<GrantState> | undefined,
    b: GrantState | PlainMessage<GrantState> | undefined
  ): boolean {
    return proto3.util.equals(GrantState, a, b)
  }
}
