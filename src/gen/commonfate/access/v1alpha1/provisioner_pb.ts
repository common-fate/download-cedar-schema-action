// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/access/v1alpha1/provisioner.proto (package commonfate.access.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { EID } from '../../entity/v1alpha1/eid_pb.js'
import { Entity } from '../../entity/v1alpha1/entity_pb.js'
import { ChildRelation } from '../../entity/v1alpha1/child_relation_pb.js'

/**
 * @generated from message commonfate.access.v1alpha1.ProvisionRequest
 */
export class ProvisionRequest extends Message<ProvisionRequest> {
  /**
   * The ID of the Grant.
   *
   * @generated from field: commonfate.entity.v1alpha1.EID grant = 1;
   */
  grant?: EID

  /**
   * @generated from field: commonfate.entity.v1alpha1.Entity principal = 2;
   */
  principal?: Entity

  /**
   * DomainPrincipal is the principal to grant access to,
   * mapped to the identity domain of the system that we're provisioning in.
   *
   * For example, instead of sending a user's email address, we send the
   * ID of the user in AWS IAM Identity Center.
   *
   * This field may be empty if Common Fate fails to map the principal.
   * A well-designed provisioner should attempt to fall back on data from
   * the core principal entity instead to provision access.
   *
   * @generated from field: commonfate.entity.v1alpha1.Entity domain_principal = 3;
   */
  domainPrincipal?: Entity

  /**
   * @generated from field: commonfate.entity.v1alpha1.Entity target = 4;
   */
  target?: Entity

  /**
   * @generated from field: commonfate.entity.v1alpha1.Entity role = 5;
   */
  role?: Entity

  constructor(data?: PartialMessage<ProvisionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.ProvisionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'grant', kind: 'message', T: EID },
    { no: 2, name: 'principal', kind: 'message', T: Entity },
    { no: 3, name: 'domain_principal', kind: 'message', T: Entity },
    { no: 4, name: 'target', kind: 'message', T: Entity },
    { no: 5, name: 'role', kind: 'message', T: Entity }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ProvisionRequest {
    return new ProvisionRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ProvisionRequest {
    return new ProvisionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ProvisionRequest {
    return new ProvisionRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ProvisionRequest | PlainMessage<ProvisionRequest> | undefined,
    b: ProvisionRequest | PlainMessage<ProvisionRequest> | undefined
  ): boolean {
    return proto3.util.equals(ProvisionRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.ProvisionResponse
 */
export class ProvisionResponse extends Message<ProvisionResponse> {
  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.Entity entities = 1;
   */
  entities: Entity[] = []

  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.ChildRelation child_relations = 2;
   */
  childRelations: ChildRelation[] = []

  constructor(data?: PartialMessage<ProvisionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.ProvisionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'entities', kind: 'message', T: Entity, repeated: true },
    {
      no: 2,
      name: 'child_relations',
      kind: 'message',
      T: ChildRelation,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ProvisionResponse {
    return new ProvisionResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ProvisionResponse {
    return new ProvisionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ProvisionResponse {
    return new ProvisionResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ProvisionResponse | PlainMessage<ProvisionResponse> | undefined,
    b: ProvisionResponse | PlainMessage<ProvisionResponse> | undefined
  ): boolean {
    return proto3.util.equals(ProvisionResponse, a, b)
  }
}
