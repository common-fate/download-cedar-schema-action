// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/access/v1alpha1/grants.proto (package commonfate.access.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { EID } from '../../entity/v1alpha1/eid_pb.js'
import { Grant, GrantStatus } from './grant_pb.js'
import { Entity } from '../../entity/v1alpha1/entity_pb.js'

/**
 * @generated from message commonfate.access.v1alpha1.QueryGrantsRequest
 */
export class QueryGrantsRequest extends Message<QueryGrantsRequest> {
  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 1;
   */
  pageToken = ''

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID principal = 2;
   */
  principal?: EID

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID target = 3;
   */
  target?: EID

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID role = 4;
   */
  role?: EID

  /**
   * The status of the Grant.
   *
   * @generated from field: optional commonfate.access.v1alpha1.GrantStatus status = 5;
   */
  status?: GrantStatus

  constructor(data?: PartialMessage<QueryGrantsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.QueryGrantsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'principal', kind: 'message', T: EID },
    { no: 3, name: 'target', kind: 'message', T: EID },
    { no: 4, name: 'role', kind: 'message', T: EID },
    {
      no: 5,
      name: 'status',
      kind: 'enum',
      T: proto3.getEnumType(GrantStatus),
      opt: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryGrantsRequest {
    return new QueryGrantsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryGrantsRequest {
    return new QueryGrantsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryGrantsRequest {
    return new QueryGrantsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryGrantsRequest | PlainMessage<QueryGrantsRequest> | undefined,
    b: QueryGrantsRequest | PlainMessage<QueryGrantsRequest> | undefined
  ): boolean {
    return proto3.util.equals(QueryGrantsRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryGrantsResponse
 */
export class QueryGrantsResponse extends Message<QueryGrantsResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.Grant grants = 1;
   */
  grants: Grant[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<QueryGrantsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.access.v1alpha1.QueryGrantsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'grants', kind: 'message', T: Grant, repeated: true },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryGrantsResponse {
    return new QueryGrantsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryGrantsResponse {
    return new QueryGrantsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryGrantsResponse {
    return new QueryGrantsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryGrantsResponse | PlainMessage<QueryGrantsResponse> | undefined,
    b: QueryGrantsResponse | PlainMessage<QueryGrantsResponse> | undefined
  ): boolean {
    return proto3.util.equals(QueryGrantsResponse, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryGrantChildrenRequest
 */
export class QueryGrantChildrenRequest extends Message<QueryGrantChildrenRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = ''

  constructor(data?: PartialMessage<QueryGrantChildrenRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.QueryGrantChildrenRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryGrantChildrenRequest {
    return new QueryGrantChildrenRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryGrantChildrenRequest {
    return new QueryGrantChildrenRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryGrantChildrenRequest {
    return new QueryGrantChildrenRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryGrantChildrenRequest
      | PlainMessage<QueryGrantChildrenRequest>
      | undefined,
    b:
      | QueryGrantChildrenRequest
      | PlainMessage<QueryGrantChildrenRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryGrantChildrenRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryGrantChildrenResponse
 */
export class QueryGrantChildrenResponse extends Message<QueryGrantChildrenResponse> {
  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.Entity entities = 1;
   */
  entities: Entity[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<QueryGrantChildrenResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.QueryGrantChildrenResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'entities', kind: 'message', T: Entity, repeated: true },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryGrantChildrenResponse {
    return new QueryGrantChildrenResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryGrantChildrenResponse {
    return new QueryGrantChildrenResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryGrantChildrenResponse {
    return new QueryGrantChildrenResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryGrantChildrenResponse
      | PlainMessage<QueryGrantChildrenResponse>
      | undefined,
    b:
      | QueryGrantChildrenResponse
      | PlainMessage<QueryGrantChildrenResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryGrantChildrenResponse, a, b)
  }
}
