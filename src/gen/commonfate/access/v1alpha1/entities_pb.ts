// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/access/v1alpha1/entities.proto (package commonfate.access.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { EID } from '../../entity/v1alpha1/eid_pb.js'
import { NamedEID } from './named_eid_pb.js'

/**
 * @generated from message commonfate.access.v1alpha1.QueryDescendentsRequest
 */
export class QueryDescendentsRequest extends Message<QueryDescendentsRequest> {
  /**
   * @generated from field: commonfate.entity.v1alpha1.EID parent = 1;
   */
  parent?: EID

  /**
   * @generated from field: string entity_type = 2;
   */
  entityType = ''

  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 10;
   */
  pageToken = ''

  constructor(data?: PartialMessage<QueryDescendentsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.QueryDescendentsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'parent', kind: 'message', T: EID },
    {
      no: 2,
      name: 'entity_type',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    { no: 10, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryDescendentsRequest {
    return new QueryDescendentsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryDescendentsRequest {
    return new QueryDescendentsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryDescendentsRequest {
    return new QueryDescendentsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryDescendentsRequest
      | PlainMessage<QueryDescendentsRequest>
      | undefined,
    b:
      | QueryDescendentsRequest
      | PlainMessage<QueryDescendentsRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryDescendentsRequest, a, b)
  }
}

/**
 * @generated from message commonfate.access.v1alpha1.QueryDescendentsResponse
 */
export class QueryDescendentsResponse extends Message<QueryDescendentsResponse> {
  /**
   * @generated from field: repeated commonfate.access.v1alpha1.NamedEID entities = 1;
   */
  entities: NamedEID[] = []

  /**
   * The token for the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<QueryDescendentsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'commonfate.access.v1alpha1.QueryDescendentsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'entities', kind: 'message', T: NamedEID, repeated: true },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): QueryDescendentsResponse {
    return new QueryDescendentsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): QueryDescendentsResponse {
    return new QueryDescendentsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): QueryDescendentsResponse {
    return new QueryDescendentsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryDescendentsResponse
      | PlainMessage<QueryDescendentsResponse>
      | undefined,
    b:
      | QueryDescendentsResponse
      | PlainMessage<QueryDescendentsResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(QueryDescendentsResponse, a, b)
  }
}
