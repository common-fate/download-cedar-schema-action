// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/entity/v1alpha1/entity.proto (package commonfate.entity.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { EID } from './eid_pb.js'

/**
 * @generated from message commonfate.entity.v1alpha1.Attribute
 */
export class Attribute extends Message<Attribute> {
  /**
   * @generated from field: string key = 1;
   */
  key = ''

  /**
   * @generated from field: commonfate.entity.v1alpha1.Value value = 2;
   */
  value?: Value

  constructor(data?: PartialMessage<Attribute>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.Attribute'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'value', kind: 'message', T: Value }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Attribute {
    return new Attribute().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Attribute {
    return new Attribute().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Attribute {
    return new Attribute().fromJsonString(jsonString, options)
  }

  static equals(
    a: Attribute | PlainMessage<Attribute> | undefined,
    b: Attribute | PlainMessage<Attribute> | undefined
  ): boolean {
    return proto3.util.equals(Attribute, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.Value
 */
export class Value extends Message<Value> {
  /**
   * @generated from oneof commonfate.entity.v1alpha1.Value.value
   */
  value:
    | {
        /**
         * @generated from field: string str = 1;
         */
        value: string
        case: 'str'
      }
    | {
        /**
         * @generated from field: bool bool = 2;
         */
        value: boolean
        case: 'bool'
      }
    | {
        /**
         * @generated from field: int64 long = 3;
         */
        value: bigint
        case: 'long'
      }
    | {
        /**
         * @generated from field: commonfate.entity.v1alpha1.EID entity = 4;
         */
        value: EID
        case: 'entity'
      }
    | {
        /**
         * @generated from field: commonfate.entity.v1alpha1.Record record = 5;
         */
        value: Record
        case: 'record'
      }
    | {
        /**
         * @generated from field: commonfate.entity.v1alpha1.Set set = 6;
         */
        value: Set
        case: 'set'
      }
    | { case: undefined; value?: undefined } = { case: undefined }

  constructor(data?: PartialMessage<Value>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.Value'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'str',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      oneof: 'value'
    },
    {
      no: 2,
      name: 'bool',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
      oneof: 'value'
    },
    {
      no: 3,
      name: 'long',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
      oneof: 'value'
    },
    { no: 4, name: 'entity', kind: 'message', T: EID, oneof: 'value' },
    { no: 5, name: 'record', kind: 'message', T: Record, oneof: 'value' },
    { no: 6, name: 'set', kind: 'message', T: Set, oneof: 'value' }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Value {
    return new Value().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Value {
    return new Value().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Value {
    return new Value().fromJsonString(jsonString, options)
  }

  static equals(
    a: Value | PlainMessage<Value> | undefined,
    b: Value | PlainMessage<Value> | undefined
  ): boolean {
    return proto3.util.equals(Value, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.Record
 */
export class Record extends Message<Record> {
  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.Attribute attributes = 1;
   */
  attributes: Attribute[] = []

  constructor(data?: PartialMessage<Record>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.Record'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'attributes', kind: 'message', T: Attribute, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Record {
    return new Record().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Record {
    return new Record().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Record {
    return new Record().fromJsonString(jsonString, options)
  }

  static equals(
    a: Record | PlainMessage<Record> | undefined,
    b: Record | PlainMessage<Record> | undefined
  ): boolean {
    return proto3.util.equals(Record, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.Set
 */
export class Set extends Message<Set> {
  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.Value values = 1;
   */
  values: Value[] = []

  constructor(data?: PartialMessage<Set>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.Set'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'values', kind: 'message', T: Value, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Set {
    return new Set().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Set {
    return new Set().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Set {
    return new Set().fromJsonString(jsonString, options)
  }

  static equals(
    a: Set | PlainMessage<Set> | undefined,
    b: Set | PlainMessage<Set> | undefined
  ): boolean {
    return proto3.util.equals(Set, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.Entity
 */
export class Entity extends Message<Entity> {
  /**
   * @generated from field: commonfate.entity.v1alpha1.EID eid = 1;
   */
  eid?: EID

  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.Attribute attributes = 2;
   */
  attributes: Attribute[] = []

  constructor(data?: PartialMessage<Entity>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.Entity'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'eid', kind: 'message', T: EID },
    { no: 2, name: 'attributes', kind: 'message', T: Attribute, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Entity {
    return new Entity().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Entity {
    return new Entity().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Entity {
    return new Entity().fromJsonString(jsonString, options)
  }

  static equals(
    a: Entity | PlainMessage<Entity> | undefined,
    b: Entity | PlainMessage<Entity> | undefined
  ): boolean {
    return proto3.util.equals(Entity, a, b)
  }
}
