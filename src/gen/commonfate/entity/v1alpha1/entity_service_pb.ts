// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file commonfate/entity/v1alpha1/entity_service.proto (package commonfate.entity.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { EID } from './eid_pb.js'
import { Entity } from './entity_pb.js'
import { ChildRelation } from './child_relation_pb.js'

/**
 * @generated from enum commonfate.entity.v1alpha1.Order
 */
export enum Order {
  /**
   * @generated from enum value: ORDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORDER_ASCENDING = 1;
   */
  ASCENDING = 1,

  /**
   * @generated from enum value: ORDER_DESCENDING = 2;
   */
  DESCENDING = 2
}
// Retrieve enum metadata with: proto3.getEnumType(Order)
proto3.util.setEnumType(Order, 'commonfate.entity.v1alpha1.Order', [
  { no: 0, name: 'ORDER_UNSPECIFIED' },
  { no: 1, name: 'ORDER_ASCENDING' },
  { no: 2, name: 'ORDER_DESCENDING' }
])

/**
 * @generated from message commonfate.entity.v1alpha1.SelectRequest
 */
export class SelectRequest extends Message<SelectRequest> {
  /**
   * @generated from field: string universe = 1;
   */
  universe = ''

  /**
   * The topmost parent entity to perform the selection on.
   * The entity service will load the descendents of this entity to
   * load all of the 'resource_type' resources belonging to this entity.
   *
   * @generated from field: commonfate.entity.v1alpha1.EID belonging_to = 2;
   */
  belongingTo?: EID

  /**
   * @generated from field: string resource_type = 3;
   */
  resourceType = ''

  /**
   * A Cedar expression to match entities for.
   *
   * @generated from field: string when = 4;
   */
  when = ''

  constructor(data?: PartialMessage<SelectRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.SelectRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'universe', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'belonging_to', kind: 'message', T: EID },
    {
      no: 3,
      name: 'resource_type',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    },
    { no: 4, name: 'when', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SelectRequest {
    return new SelectRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SelectRequest {
    return new SelectRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SelectRequest {
    return new SelectRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SelectRequest | PlainMessage<SelectRequest> | undefined,
    b: SelectRequest | PlainMessage<SelectRequest> | undefined
  ): boolean {
    return proto3.util.equals(SelectRequest, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.SelectResponse
 */
export class SelectResponse extends Message<SelectResponse> {
  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.Entity entities = 1;
   */
  entities: Entity[] = []

  constructor(data?: PartialMessage<SelectResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.SelectResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'entities', kind: 'message', T: Entity, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SelectResponse {
    return new SelectResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SelectResponse {
    return new SelectResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SelectResponse {
    return new SelectResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SelectResponse | PlainMessage<SelectResponse> | undefined,
    b: SelectResponse | PlainMessage<SelectResponse> | undefined
  ): boolean {
    return proto3.util.equals(SelectResponse, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.ListRequest
 */
export class ListRequest extends Message<ListRequest> {
  /**
   * @generated from field: string universe = 1;
   */
  universe = ''

  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = ''

  /**
   * Filter entities for a particular type
   *
   * @generated from field: string type = 3;
   */
  type = ''

  /**
   * If true, will include archived entities in the query
   *
   * @generated from field: bool include_archived = 6;
   */
  includeArchived = false

  /**
   * @generated from field: optional commonfate.entity.v1alpha1.Order order = 7;
   */
  order?: Order

  constructor(data?: PartialMessage<ListRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.ListRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'universe', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'type', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 6,
      name: 'include_archived',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */
    },
    {
      no: 7,
      name: 'order',
      kind: 'enum',
      T: proto3.getEnumType(Order),
      opt: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListRequest {
    return new ListRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListRequest {
    return new ListRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListRequest {
    return new ListRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListRequest | PlainMessage<ListRequest> | undefined,
    b: ListRequest | PlainMessage<ListRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListRequest, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.Entity entities = 1;
   */
  entities: Entity[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<ListResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.ListResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'entities', kind: 'message', T: Entity, repeated: true },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListResponse {
    return new ListResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListResponse {
    return new ListResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListResponse | PlainMessage<ListResponse> | undefined,
    b: ListResponse | PlainMessage<ListResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListResponse, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.ListChildrenRequest
 */
export class ListChildrenRequest extends Message<ListChildrenRequest> {
  /**
   * @generated from field: string universe = 1;
   */
  universe = ''

  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = ''

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID parent = 3;
   */
  parent?: EID

  constructor(data?: PartialMessage<ListChildrenRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.ListChildrenRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'universe', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'parent', kind: 'message', T: EID }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListChildrenRequest {
    return new ListChildrenRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListChildrenRequest {
    return new ListChildrenRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListChildrenRequest {
    return new ListChildrenRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListChildrenRequest | PlainMessage<ListChildrenRequest> | undefined,
    b: ListChildrenRequest | PlainMessage<ListChildrenRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListChildrenRequest, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.ListChildrenResponse
 */
export class ListChildrenResponse extends Message<ListChildrenResponse> {
  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.EID children = 1;
   */
  children: EID[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<ListChildrenResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.ListChildrenResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'children', kind: 'message', T: EID, repeated: true },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListChildrenResponse {
    return new ListChildrenResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListChildrenResponse {
    return new ListChildrenResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListChildrenResponse {
    return new ListChildrenResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListChildrenResponse | PlainMessage<ListChildrenResponse> | undefined,
    b: ListChildrenResponse | PlainMessage<ListChildrenResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListChildrenResponse, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.ListParentsRequest
 */
export class ListParentsRequest extends Message<ListParentsRequest> {
  /**
   * @generated from field: string universe = 1;
   */
  universe = ''

  /**
   * The token for the next page.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = ''

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID child = 3;
   */
  child?: EID

  constructor(data?: PartialMessage<ListParentsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.ListParentsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'universe', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'page_token', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'child', kind: 'message', T: EID }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListParentsRequest {
    return new ListParentsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListParentsRequest {
    return new ListParentsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListParentsRequest {
    return new ListParentsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListParentsRequest | PlainMessage<ListParentsRequest> | undefined,
    b: ListParentsRequest | PlainMessage<ListParentsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListParentsRequest, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.ListParentsResponse
 */
export class ListParentsResponse extends Message<ListParentsResponse> {
  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.EID parents = 1;
   */
  parents: EID[] = []

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = ''

  constructor(data?: PartialMessage<ListParentsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.ListParentsResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'parents', kind: 'message', T: EID, repeated: true },
    {
      no: 2,
      name: 'next_page_token',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListParentsResponse {
    return new ListParentsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListParentsResponse {
    return new ListParentsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListParentsResponse {
    return new ListParentsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListParentsResponse | PlainMessage<ListParentsResponse> | undefined,
    b: ListParentsResponse | PlainMessage<ListParentsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListParentsResponse, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.GetRequest
 */
export class GetRequest extends Message<GetRequest> {
  /**
   * @generated from field: string universe = 1;
   */
  universe = ''

  /**
   * @generated from field: commonfate.entity.v1alpha1.EID eid = 2;
   */
  eid?: EID

  constructor(data?: PartialMessage<GetRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.GetRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'universe', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'eid', kind: 'message', T: EID }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetRequest {
    return new GetRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetRequest {
    return new GetRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetRequest {
    return new GetRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetRequest | PlainMessage<GetRequest> | undefined,
    b: GetRequest | PlainMessage<GetRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetRequest, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.GetResponse
 */
export class GetResponse extends Message<GetResponse> {
  /**
   * @generated from field: commonfate.entity.v1alpha1.Entity entity = 1;
   */
  entity?: Entity

  constructor(data?: PartialMessage<GetResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.GetResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'entity', kind: 'message', T: Entity }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GetResponse {
    return new GetResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GetResponse {
    return new GetResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GetResponse {
    return new GetResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: GetResponse | PlainMessage<GetResponse> | undefined,
    b: GetResponse | PlainMessage<GetResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetResponse, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.BatchGetRequest
 */
export class BatchGetRequest extends Message<BatchGetRequest> {
  /**
   * @generated from field: string universe = 1;
   */
  universe = ''

  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.EID eids = 2;
   */
  eids: EID[] = []

  constructor(data?: PartialMessage<BatchGetRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.BatchGetRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'universe', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'eids', kind: 'message', T: EID, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BatchGetRequest {
    return new BatchGetRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BatchGetRequest {
    return new BatchGetRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BatchGetRequest {
    return new BatchGetRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: BatchGetRequest | PlainMessage<BatchGetRequest> | undefined,
    b: BatchGetRequest | PlainMessage<BatchGetRequest> | undefined
  ): boolean {
    return proto3.util.equals(BatchGetRequest, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.BatchGetResponse
 */
export class BatchGetResponse extends Message<BatchGetResponse> {
  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.Entity entities = 1;
   */
  entities: Entity[] = []

  constructor(data?: PartialMessage<BatchGetResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.BatchGetResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'entities', kind: 'message', T: Entity, repeated: true }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BatchGetResponse {
    return new BatchGetResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BatchGetResponse {
    return new BatchGetResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BatchGetResponse {
    return new BatchGetResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: BatchGetResponse | PlainMessage<BatchGetResponse> | undefined,
    b: BatchGetResponse | PlainMessage<BatchGetResponse> | undefined
  ): boolean {
    return proto3.util.equals(BatchGetResponse, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.BatchUpdateRequest
 */
export class BatchUpdateRequest extends Message<BatchUpdateRequest> {
  /**
   * @generated from field: string universe = 1;
   */
  universe = ''

  /**
   * @generated from field: repeated commonfate.entity.v1alpha1.Entity put = 2;
   */
  put: Entity[] = []

  /**
   * parent/child relationships to add.
   *
   * @generated from field: repeated commonfate.entity.v1alpha1.ChildRelation put_children = 3;
   */
  putChildren: ChildRelation[] = []

  /**
   * entities to archive
   *
   * @generated from field: repeated commonfate.entity.v1alpha1.EID archive = 4;
   */
  archive: EID[] = []

  /**
   * entities to mark as active
   *
   * @generated from field: repeated commonfate.entity.v1alpha1.EID unarchive = 5;
   */
  unarchive: EID[] = []

  /**
   * entities to delete
   *
   * @generated from field: repeated commonfate.entity.v1alpha1.EID delete = 6;
   */
  delete: EID[] = []

  /**
   * parent/child relations to delete.
   *
   * @generated from field: repeated commonfate.entity.v1alpha1.ChildRelation delete_children = 7;
   */
  deleteChildren: ChildRelation[] = []

  constructor(data?: PartialMessage<BatchUpdateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.BatchUpdateRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'universe', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'put', kind: 'message', T: Entity, repeated: true },
    {
      no: 3,
      name: 'put_children',
      kind: 'message',
      T: ChildRelation,
      repeated: true
    },
    { no: 4, name: 'archive', kind: 'message', T: EID, repeated: true },
    { no: 5, name: 'unarchive', kind: 'message', T: EID, repeated: true },
    { no: 6, name: 'delete', kind: 'message', T: EID, repeated: true },
    {
      no: 7,
      name: 'delete_children',
      kind: 'message',
      T: ChildRelation,
      repeated: true
    }
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BatchUpdateRequest {
    return new BatchUpdateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BatchUpdateRequest {
    return new BatchUpdateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BatchUpdateRequest {
    return new BatchUpdateRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: BatchUpdateRequest | PlainMessage<BatchUpdateRequest> | undefined,
    b: BatchUpdateRequest | PlainMessage<BatchUpdateRequest> | undefined
  ): boolean {
    return proto3.util.equals(BatchUpdateRequest, a, b)
  }
}

/**
 * @generated from message commonfate.entity.v1alpha1.BatchUpdateResponse
 */
export class BatchUpdateResponse extends Message<BatchUpdateResponse> {
  constructor(data?: PartialMessage<BatchUpdateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'commonfate.entity.v1alpha1.BatchUpdateResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): BatchUpdateResponse {
    return new BatchUpdateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): BatchUpdateResponse {
    return new BatchUpdateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BatchUpdateResponse {
    return new BatchUpdateResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: BatchUpdateResponse | PlainMessage<BatchUpdateResponse> | undefined,
    b: BatchUpdateResponse | PlainMessage<BatchUpdateResponse> | undefined
  ): boolean {
    return proto3.util.equals(BatchUpdateResponse, a, b)
  }
}
